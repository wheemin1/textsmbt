{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a Korean word similarity battle game where players compete in 5-round matches by submitting words that are semantically similar to a target word. The game uses FastText Korean word embeddings to calculate semantic similarity scores, with the highest total score across rounds determining the winner. Players can compete against other humans or AI bots of varying difficulty levels in real-time multiplayer sessions.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\nThe client is built with React 18 and TypeScript using Vite as the build tool. The UI framework is shadcn/ui with Radix UI components and Tailwind CSS for styling. The application uses Wouter for client-side routing and TanStack Query for state management and API caching. Real-time game updates are handled through WebSocket connections managed by a custom WebSocketManager class.\n\n## Backend Architecture\nThe server uses Express.js with TypeScript running on Node.js. The architecture follows a layered approach with separate route handlers, service classes, and storage abstractions. Game logic is centralized in a GameEngine service that manages round progression, word validation, and scoring. A BotPlayer service provides AI opponents with configurable difficulty levels. The server supports both HTTP REST endpoints and WebSocket connections for real-time game updates.\n\n## Data Storage Solutions\nThe application uses Drizzle ORM with PostgreSQL for data persistence, specifically configured for Neon Database. The schema includes tables for users, games, game submissions, and matchmaking queues. For development and testing, there's a MemStorage implementation that provides in-memory storage. Database migrations are managed through Drizzle Kit with migrations stored in a separate directory.\n\n## Authentication and Authorization\nUser authentication is simplified with localStorage-based session management. Users create accounts by providing a nickname, and the system generates unique user IDs. No complex authentication flows are implemented - the focus is on game functionality rather than security features.\n\n## External Dependencies\nThe core game logic depends on Korean word similarity calculations using FastText embeddings (cc.ko.300.vec). The current implementation includes placeholder services that will integrate with pre-processed Korean word vectors similar to the Semantle-ko project. The application is designed to run on Replit with development-specific plugins for error handling and debugging.","size_bytes":2587},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"Noto Sans KR\", \"Inter\", \"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      animation: {\n        'bounce-slow': 'bounce 3s infinite',\n        'pulse-fast': 'pulse 1s infinite',\n        'fade-in': 'fadeIn 0.5s ease-in-out',\n        'slide-up': 'slideUp 0.3s ease-out',\n      },\n      keyframes: {\n        fadeIn: {\n          '0%': { opacity: '0', transform: 'translateY(10px)' },\n          '100%': { opacity: '1', transform: 'translateY(0)' },\n        },\n        slideUp: {\n          '0%': { transform: 'translateY(20px)', opacity: '0' },\n          '100%': { transform: 'translateY(0)', opacity: '1' },\n        },\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2740},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { gameEngine } from \"./services/gameEngine\";\nimport { word2vecService } from \"./services/word2vec\";\nimport { setupAuth, isAuthenticated } from \"./replitAuth\";\nimport { z } from \"zod\";\n\n// Request validation schemas\nconst joinQueueSchema = z.object({\n  userId: z.string(),\n  language: z.string().default(\"ko\")\n});\n\nconst submitWordSchema = z.object({\n  gameId: z.string(),\n  userId: z.string(),\n  word: z.string().min(1).max(50)\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n  \n  // Setup authentication\n  await setupAuth(app);\n\n  // WebSocket server for real-time game updates\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  const gameConnections = new Map<string, Set<WebSocket>>();\n\n  wss.on('connection', (ws: WebSocket, req) => {\n    console.log('WebSocket connection established');\n    \n    ws.on('message', (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        \n        if (data.type === 'join_game' && data.gameId) {\n          // Add connection to game room\n          if (!gameConnections.has(data.gameId)) {\n            gameConnections.set(data.gameId, new Set());\n          }\n          gameConnections.get(data.gameId)!.add(ws);\n          \n          ws.on('close', () => {\n            gameConnections.get(data.gameId)?.delete(ws);\n          });\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n  });\n\n  // Broadcast to all clients in a game\n  function broadcastToGame(gameId: string, message: any) {\n    const connections = gameConnections.get(gameId);\n    if (connections) {\n      const messageStr = JSON.stringify(message);\n      connections.forEach(ws => {\n        if (ws.readyState === WebSocket.OPEN) {\n          ws.send(messageStr);\n        }\n      });\n    }\n  }\n\n  // Health check\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ \n      ok: true, \n      serverTime: new Date().toISOString(),\n      wordsLoaded: word2vecService.isValidWord(\"가족\")\n    });\n  });\n\n  // Mock login route for development\n  app.post(\"/api/auth/mock-login\", async (req, res) => {\n    try {\n      const { nickname } = req.body;\n      \n      if (!nickname || nickname.length < 2) {\n        return res.status(400).json({ error: \"INVALID_NICKNAME\", message: \"닉네임은 2글자 이상이어야 합니다\" });\n      }\n\n      // Create mock user data\n      const mockUserId = `mock_${Date.now()}`;\n      const mockUser = {\n        id: mockUserId,\n        nickname: nickname,\n        email: `${nickname}@mock.dev`,\n        firstName: nickname,\n        lastName: \"User\",\n        profileImageUrl: null,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        gamesPlayed: 0,\n        gamesWon: 0,\n        totalScore: 0,\n        bestScore: 0,\n        currentStreak: 0,\n        bestStreak: 0\n      };\n\n      // Store mock user in storage\n      await storage.upsertUser(mockUser);\n\n      // Set session\n      req.session.user = {\n        id: mockUserId,\n        email: mockUser.email,\n        firstName: mockUser.firstName,\n        lastName: mockUser.lastName,\n        profileImageUrl: mockUser.profileImageUrl || undefined,\n        accessToken: \"mock_token\",\n        refreshToken: \"mock_refresh_token\"\n      };\n\n      res.json({ message: \"Mock login successful\", user: mockUser });\n    } catch (error) {\n      console.error('Mock login error:', error);\n      res.status(500).json({ error: \"SERVER_ERROR\", message: \"로그인 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Auth routes\n  app.get('/api/auth/user', async (req: any, res) => {\n    try {\n      const userId = req.session.user?.id;\n      if (!userId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Logout route\n  app.post(\"/api/auth/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error(\"Session destroy error:\", err);\n        return res.status(500).json({ message: \"로그아웃 중 오류가 발생했습니다\" });\n      }\n      res.json({ message: \"로그아웃되었습니다\" });\n    });\n  });\n\n  // Create or get user by nickname (for non-auth users)\n  app.post(\"/api/users\", async (req, res) => {\n    try {\n      const { nickname } = req.body;\n      \n      if (!nickname || nickname.length < 2) {\n        return res.status(400).json({ error: \"INVALID_NICKNAME\", message: \"닉네임은 2글자 이상이어야 합니다\" });\n      }\n\n      // Try to find existing user\n      let user = await storage.getUserByNickname(nickname);\n      \n      if (!user) {\n        // Create new user\n        user = await storage.createUser({ nickname });\n      }\n\n      res.json(user);\n    } catch (error) {\n      console.error('Create user error:', error);\n      res.status(500).json({ error: \"SERVER_ERROR\", message: \"서버 오류가 발생했습니다\" });\n    }\n  });\n\n  // Join matchmaking queue\n  app.post(\"/api/queue/join\", async (req, res) => {\n    try {\n      const validatedData = joinQueueSchema.parse(req.body);\n      let { userId, language } = validatedData;\n\n      // First, try to get user from localStorage userId\n      let user = await storage.getUser(userId);\n      \n      // If not found, try session user\n      if (!user && req.session.user?.id) {\n        userId = req.session.user.id;\n        user = await storage.getUser(userId);\n      }\n      \n      // If still not found, return error (user should login first)\n      if (!user) {\n        return res.status(404).json({ error: \"USER_NOT_FOUND\", message: \"사용자를 찾을 수 없습니다\" });\n      }\n\n      // Use the actual user ID from database\n      const actualUserId = user.id;\n\n      // Remove user from any existing queue\n      await storage.removeFromQueue(actualUserId);\n\n      // Look for existing match\n      const match = await storage.findQueueMatch(actualUserId, language);\n      \n      if (match) {\n        // Found a match! Create game\n        await storage.removeFromQueue(match.userId);\n        const game = await gameEngine.createGame(actualUserId, match.userId, false);\n        \n        res.json({\n          gameId: game.id,\n          isBot: false,\n          opponent: {\n            nickname: (await storage.getUser(match.userId))?.nickname || \"상대방\"\n          }\n        });\n      } else {\n        // Add to queue\n        await storage.addToQueue({ userId: actualUserId, language });\n        \n        // For development, immediately create bot game if no match found\n        await storage.removeFromQueue(actualUserId);\n        const game = await gameEngine.createGame(actualUserId, undefined, true);\n        \n        res.json({\n          gameId: game.id,\n          isBot: true,\n          opponent: {\n            nickname: \"AI 봇\"\n          }\n        });\n      }\n    } catch (error) {\n      console.error('Join queue error:', error);\n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"VALIDATION_ERROR\", message: \"잘못된 요청 데이터\" });\n      }\n      res.status(500).json({ error: \"SERVER_ERROR\", message: \"매칭 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Submit word for current round\n  app.post(\"/api/game/submit\", async (req, res) => {\n    try {\n      const validatedData = submitWordSchema.parse(req.body);\n      const { gameId, userId, word } = validatedData;\n\n      const result = await gameEngine.submitWord(gameId, userId, word);\n      \n      // Broadcast round result when complete\n      if (result.roundComplete) {\n        broadcastToGame(gameId, {\n          type: 'round_complete',\n          result\n        });\n      }\n\n      res.json(result);\n    } catch (error) {\n      console.error('Submit word error:', error);\n      \n      if (error instanceof z.ZodError) {\n        return res.status(400).json({ error: \"VALIDATION_ERROR\", message: \"잘못된 요청 데이터\" });\n      }\n      \n      const message = error instanceof Error ? error.message : \"단어 제출 중 오류가 발생했습니다\";\n      \n      if (message.includes(\"Invalid word\")) {\n        return res.status(400).json({ error: \"INVALID_WORD\", message: \"사전에 없는 단어입니다\" });\n      } else if (message.includes(\"Already submitted\")) {\n        return res.status(409).json({ error: \"ALREADY_SUBMITTED\", message: \"이미 이 라운드에 단어를 제출했습니다\" });\n      } else if (message.includes(\"already used this word\")) {\n        return res.status(409).json({ error: \"WORD_CONFLICT\", message: \"상대방이 이미 사용한 단어입니다\" });\n      } else if (message.includes(\"previous round\")) {\n        return res.status(409).json({ error: \"WORD_REUSE\", message: \"이전 라운드에서 사용한 단어는 다시 사용할 수 없습니다\" });\n      }\n      \n      res.status(500).json({ error: \"SERVER_ERROR\", message });\n    }\n  });\n\n  // Get game status\n  app.get(\"/api/game-status/:gameId\", async (req, res) => {\n    try {\n      const { gameId } = req.params;\n      const game = await storage.getGame(gameId);\n      \n      if (!game) {\n        // Return dummy state instead of 404 to prevent client errors\n        return res.json({\n          gameId,\n          status: \"not_found\",\n          currentRound: 1,\n          timeRemaining: 0,\n          rounds: [],\n          myBestScore: 0,\n          opponentBestScore: 0\n        });\n      }\n\n      const submissions = await storage.getGameSubmissions(gameId);\n      const rounds = Array.isArray(game.rounds) ? game.rounds : [];\n      \n      // Calculate best scores\n      const myScores = submissions\n        .filter(s => s.userId === game.player1Id)\n        .map(s => s.score);\n      const opponentScores = submissions\n        .filter(s => s.userId === game.player2Id || s.userId === \"bot\")\n        .map(s => s.score);\n\n      res.json({\n        gameId,\n        status: game.status,\n        currentRound: game.currentRound,\n        timeRemaining: 15, // TODO: Calculate actual remaining time\n        rounds,\n        myBestScore: myScores.length > 0 ? Math.max(...myScores) : 0,\n        opponentBestScore: opponentScores.length > 0 ? Math.max(...opponentScores) : 0,\n        isBot: game.isBot,\n        opponent: {\n          nickname: game.isBot ? \"AI 봇\" : \"상대방\", // TODO: Get actual opponent nickname\n          type: game.isBot ? \"bot\" : \"human\"\n        }\n      });\n    } catch (error) {\n      console.error('Get game status error:', error);\n      res.status(500).json({ error: \"SERVER_ERROR\", message: \"게임 상태 조회 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Get word suggestions for autocomplete\n  app.get(\"/api/words/suggest\", (req, res) => {\n    try {\n      const { q, limit } = req.query;\n      const query = (q as string) || \"\";\n      const maxResults = Math.min(parseInt(limit as string) || 8, 20);\n      \n      const suggestions = word2vecService.getSuggestions(query, maxResults);\n      res.json({ suggestions });\n    } catch (error) {\n      console.error('Word suggestions error:', error);\n      res.status(500).json({ error: \"SERVER_ERROR\", message: \"단어 검색 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Validate word endpoint\n  app.post(\"/api/words/validate\", (req, res) => {\n    try {\n      const { word } = req.body;\n      \n      if (!word) {\n        return res.status(400).json({ error: \"MISSING_WORD\", message: \"단어를 입력해주세요\" });\n      }\n\n      const isValid = word2vecService.isValidWord(word);\n      res.json({ \n        isValid,\n        word,\n        message: isValid ? \"유효한 단어입니다\" : \"사전에 없는 단어입니다\"\n      });\n    } catch (error) {\n      console.error('Word validation error:', error);\n      res.status(500).json({ error: \"SERVER_ERROR\", message: \"단어 검증 중 오류가 발생했습니다\" });\n    }\n  });\n\n  // Get user statistics\n  app.get(\"/api/users/:userId/stats\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      \n      const user = await storage.getUser(userId);\n      if (!user) {\n        return res.status(404).json({ error: \"USER_NOT_FOUND\", message: \"사용자를 찾을 수 없습니다\" });\n      }\n\n      // Calculate win rate\n      const winRate = user.gamesPlayed > 0 ? Math.round((user.gamesWon / user.gamesPlayed) * 100) : 0;\n      const lossCount = user.gamesPlayed - user.gamesWon;\n\n      res.json({\n        gamesPlayed: user.gamesPlayed,\n        gamesWon: user.gamesWon,\n        gamesLost: lossCount,\n        winRate,\n        bestScore: user.bestScore,\n        totalScore: user.totalScore,\n        currentStreak: user.currentStreak,\n        bestStreak: user.bestStreak,\n        averageScore: user.gamesPlayed > 0 ? Math.round(user.totalScore / user.gamesPlayed) : 0\n      });\n    } catch (error) {\n      console.error('Get user stats error:', error);\n      res.status(500).json({ error: \"SERVER_ERROR\", message: \"통계 조회 중 오류가 발생했습니다\" });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":13438},"server/storage.ts":{"content":"import { type User, type Game, type GameSubmission, type MatchmakingEntry, type InsertUser, type InsertGame, type InsertGameSubmission, type InsertMatchmaking, users, games, gameSubmissions, matchmakingQueue } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport { db } from \"./db\";\nimport { eq, desc, and } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Users  \n  getUser(id: string): Promise<User | undefined>;\n  getUserByNickname(nickname: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  upsertUser(user: any): Promise<User>;\n\n  // Games\n  getGame(id: string): Promise<Game | undefined>;\n  createGame(game: InsertGame): Promise<Game>;\n  updateGame(id: string, updates: Partial<Game>): Promise<Game | undefined>;\n\n  // Game submissions\n  getGameSubmissions(gameId: string): Promise<GameSubmission[]>;\n  createSubmission(submission: InsertGameSubmission): Promise<GameSubmission>;\n  getSubmissionsByRound(gameId: string, round: number): Promise<GameSubmission[]>;\n\n  // Matchmaking\n  addToQueue(entry: InsertMatchmaking): Promise<MatchmakingEntry>;\n  findQueueMatch(userId: string, language: string): Promise<MatchmakingEntry | undefined>;\n  removeFromQueue(userId: string): Promise<void>;\n  getQueuePosition(userId: string): Promise<number>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private games: Map<string, Game>;\n  private submissions: Map<string, GameSubmission>;\n  private queue: Map<string, MatchmakingEntry>;\n\n  constructor() {\n    this.users = new Map();\n    this.games = new Map();\n    this.submissions = new Map();\n    this.queue = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByNickname(nickname: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.nickname === nickname,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const now = new Date();\n    const user: User = { \n      ...insertUser, \n      id, \n      email: insertUser.email || null,\n      firstName: insertUser.firstName || null,\n      lastName: insertUser.lastName || null,\n      profileImageUrl: insertUser.profileImageUrl || null,\n      createdAt: now,\n      updatedAt: null\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async upsertUser(userData: any): Promise<User> {\n    const existingUser = this.users.get(userData.id);\n    if (existingUser) {\n      const updatedUser: User = {\n        ...existingUser,\n        ...userData,\n        updatedAt: new Date()\n      };\n      this.users.set(userData.id, updatedUser);\n      return updatedUser;\n    } else {\n      const user: User = {\n        ...userData,\n        createdAt: new Date(),\n        updatedAt: null\n      };\n      this.users.set(userData.id, user);\n      return user;\n    }\n  }\n\n  async getGame(id: string): Promise<Game | undefined> {\n    return this.games.get(id);\n  }\n\n  async createGame(insertGame: InsertGame): Promise<Game> {\n    const id = randomUUID();\n    const now = new Date();\n    const game: Game = { \n      ...insertGame,\n      id, \n      createdAt: now,\n      updatedAt: now,\n      status: insertGame.status || 'waiting',\n      player2Id: insertGame.player2Id || null,\n      isBot: insertGame.isBot || false,\n      botDifficulty: insertGame.botDifficulty || null,\n      currentRound: insertGame.currentRound || 1,\n      rounds: insertGame.rounds || [],\n      winnerId: insertGame.winnerId || null\n    };\n    this.games.set(id, game);\n    return game;\n  }\n\n  async updateGame(id: string, updates: Partial<Game>): Promise<Game | undefined> {\n    const game = this.games.get(id);\n    if (!game) return undefined;\n\n    const updatedGame = { \n      ...game, \n      ...updates, \n      updatedAt: new Date() \n    };\n    this.games.set(id, updatedGame);\n    return updatedGame;\n  }\n\n  async getGameSubmissions(gameId: string): Promise<GameSubmission[]> {\n    return Array.from(this.submissions.values()).filter(\n      (submission) => submission.gameId === gameId\n    );\n  }\n\n  async createSubmission(insertSubmission: InsertGameSubmission): Promise<GameSubmission> {\n    const id = randomUUID();\n    const submission: GameSubmission = { \n      ...insertSubmission, \n      id,\n      submittedAt: new Date() \n    };\n    this.submissions.set(id, submission);\n    return submission;\n  }\n\n  async getSubmissionsByRound(gameId: string, round: number): Promise<GameSubmission[]> {\n    return Array.from(this.submissions.values()).filter(\n      (submission) => submission.gameId === gameId && submission.round === round\n    );\n  }\n\n  async addToQueue(insertEntry: InsertMatchmaking): Promise<MatchmakingEntry> {\n    const id = randomUUID();\n    const entry: MatchmakingEntry = { \n      ...insertEntry, \n      id,\n      createdAt: new Date(),\n      language: insertEntry.language || 'ko'\n    };\n    this.queue.set(id, entry);\n    return entry;\n  }\n\n  async findQueueMatch(userId: string, language: string): Promise<MatchmakingEntry | undefined> {\n    return Array.from(this.queue.values()).find(\n      (entry) => entry.userId !== userId && entry.language === language\n    );\n  }\n\n  async removeFromQueue(userId: string): Promise<void> {\n    const entries = Array.from(this.queue.entries());\n    for (const [id, entry] of entries) {\n      if (entry.userId === userId) {\n        this.queue.delete(id);\n        break;\n      }\n    }\n  }\n\n  async getQueuePosition(userId: string): Promise<number> {\n    const entries = Array.from(this.queue.values())\n      .sort((a, b) => a.createdAt.getTime() - b.createdAt.getTime());\n    return entries.findIndex(entry => entry.userId === userId) + 1;\n  }\n}\n\n// Database storage implementation\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByNickname(nickname: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.nickname, nickname));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async getGame(id: string): Promise<Game | undefined> {\n    const [game] = await db.select().from(games).where(eq(games.id, id));\n    return game || undefined;\n  }\n\n  async createGame(insertGame: InsertGame): Promise<Game> {\n    const [game] = await db\n      .insert(games)\n      .values({\n        ...insertGame,\n        status: insertGame.status || 'waiting',\n        player2Id: insertGame.player2Id || null,\n        isBot: insertGame.isBot || false,\n        botDifficulty: insertGame.botDifficulty || null,\n        currentRound: insertGame.currentRound || 1,\n        rounds: insertGame.rounds || [],\n        winnerId: insertGame.winnerId || null\n      })\n      .returning();\n    return game;\n  }\n\n  async updateGame(id: string, updates: Partial<Game>): Promise<Game | undefined> {\n    const [game] = await db\n      .update(games)\n      .set(updates)\n      .where(eq(games.id, id))\n      .returning();\n    return game || undefined;\n  }\n\n  async getGameSubmissions(gameId: string): Promise<GameSubmission[]> {\n    return await db\n      .select()\n      .from(gameSubmissions)\n      .where(eq(gameSubmissions.gameId, gameId))\n      .orderBy(desc(gameSubmissions.submittedAt));\n  }\n\n  async createSubmission(insertSubmission: InsertGameSubmission): Promise<GameSubmission> {\n    const [submission] = await db\n      .insert(gameSubmissions)\n      .values(insertSubmission)\n      .returning();\n    return submission;\n  }\n\n  async getSubmissionsByRound(gameId: string, round: number): Promise<GameSubmission[]> {\n    return await db\n      .select()\n      .from(gameSubmissions)\n      .where(and(eq(gameSubmissions.gameId, gameId), eq(gameSubmissions.round, round)));\n  }\n\n  async addToQueue(insertEntry: InsertMatchmaking): Promise<MatchmakingEntry> {\n    const [entry] = await db\n      .insert(matchmakingQueue)\n      .values({\n        ...insertEntry,\n        language: insertEntry.language || 'ko'\n      })\n      .returning();\n    return entry;\n  }\n\n  async findQueueMatch(userId: string, language: string): Promise<MatchmakingEntry | undefined> {\n    const [entry] = await db\n      .select()\n      .from(matchmakingQueue)\n      .where(eq(matchmakingQueue.language, language))\n      .orderBy(desc(matchmakingQueue.createdAt))\n      .limit(1);\n    return entry?.userId !== userId ? entry : undefined;\n  }\n\n  async removeFromQueue(userId: string): Promise<void> {\n    await db.delete(matchmakingQueue).where(eq(matchmakingQueue.userId, userId));\n  }\n\n  async getQueuePosition(userId: string): Promise<number> {\n    const entries = await db\n      .select()\n      .from(matchmakingQueue)\n      .orderBy(desc(matchmakingQueue.createdAt));\n    return entries.findIndex(entry => entry.userId === userId) + 1;\n  }\n\n  async upsertUser(userData: any): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n}\n\nexport const storage = new DatabaseStorage();","size_bytes":9418},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, timestamp, boolean, jsonb, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for Replit Auth\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  nickname: varchar(\"nickname\", { length: 20 }).notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n  gamesPlayed: integer(\"games_played\").default(0).notNull(),\n  gamesWon: integer(\"games_won\").default(0).notNull(),\n  totalScore: integer(\"total_score\").default(0).notNull(),\n  bestScore: integer(\"best_score\").default(0).notNull(),\n  currentStreak: integer(\"current_streak\").default(0).notNull(),\n  bestStreak: integer(\"best_streak\").default(0).notNull(),\n});\n\nexport const games = pgTable(\"games\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  player1Id: varchar(\"player1_id\").references(() => users.id).notNull(),\n  player2Id: varchar(\"player2_id\"),\n  isBot: boolean(\"is_bot\").default(false).notNull(),\n  botDifficulty: varchar(\"bot_difficulty\", { length: 20 }),\n  status: varchar(\"status\", { length: 20 }).notNull().default(\"waiting\"), // waiting, active, completed\n  currentRound: integer(\"current_round\").default(1).notNull(),\n  rounds: jsonb(\"rounds\").default([]).notNull(), // Array of round data\n  winnerId: varchar(\"winner_id\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const gameSubmissions = pgTable(\"game_submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  gameId: varchar(\"game_id\").references(() => games.id).notNull(),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  round: integer(\"round\").notNull(),\n  word: varchar(\"word\", { length: 50 }).notNull(),\n  score: integer(\"score\").notNull(),\n  submittedAt: timestamp(\"submitted_at\").defaultNow().notNull(),\n});\n\nexport const matchmakingQueue = pgTable(\"matchmaking_queue\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  language: varchar(\"language\", { length: 10 }).default(\"ko\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertGameSchema = createInsertSchema(games).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertGameSubmissionSchema = createInsertSchema(gameSubmissions).omit({\n  id: true,\n  submittedAt: true,\n});\n\nexport const insertMatchmakingSchema = createInsertSchema(matchmakingQueue).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type Game = typeof games.$inferSelect;\nexport type GameSubmission = typeof gameSubmissions.$inferSelect;\nexport type MatchmakingEntry = typeof matchmakingQueue.$inferSelect;\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type InsertGame = z.infer<typeof insertGameSchema>;\nexport type InsertGameSubmission = z.infer<typeof insertGameSubmissionSchema>;\nexport type InsertMatchmaking = z.infer<typeof insertMatchmakingSchema>;\nexport type UpsertUser = typeof users.$inferInsert;\n\n// Game state types\nexport interface RoundData {\n  round: number;\n  player1Word?: string;\n  player1Score?: number;\n  player2Word?: string;\n  player2Score?: number;\n  completed: boolean;\n  completedAt?: string;\n}\n\nexport interface GameState {\n  gameId: string;\n  currentRound: number;\n  timeRemaining: number;\n  isBot: boolean;\n  opponent: {\n    nickname: string;\n    type: \"human\" | \"bot\";\n  };\n  rounds: RoundData[];\n  myBestScore: number;\n  opponentBestScore: number;\n  status: \"waiting\" | \"active\" | \"completed\";\n  winnerId?: string;\n}\n","size_bytes":4413},"client/src/App.tsx":{"content":"\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport Home from \"./pages/Home\";\nimport Landing from \"./pages/Landing\";\nimport Game from \"./pages/Game\";\nimport Settings from \"./pages/Settings\";\nimport Leaderboard from \"./pages/Leaderboard\";\nimport GameHistory from \"./pages/GameHistory\";\nimport AuthNavigation from \"@/components/AuthNavigation\";\n\nfunction Router() {\n  const { isAuthenticated, isLoading, user } = useAuth();\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"w-16 h-16 border-4 border-primary border-t-transparent rounded-full animate-spin\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <Switch>\n      {isLoading || !isAuthenticated ? (\n        <Route path=\"/\" component={Landing} />\n      ) : (\n        <>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/game/:gameId\" component={Game} />\n          <Route path=\"/settings\" component={Settings} />\n          <Route path=\"/leaderboard\" component={Leaderboard} />\n          <Route path=\"/game-history\" component={GameHistory} />\n        </>\n      )}\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <div className=\"min-h-screen bg-background\">\n          {/* Navigation Header */}\n          <header className=\"bg-card border-b border-border\">\n            <div className=\"mx-auto max-w-6xl px-4 py-4 flex items-center justify-between\">\n              <div className=\"flex items-center space-x-3\">\n                <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-accent rounded-lg flex items-center justify-center\">\n                  <i className=\"fas fa-sword text-primary-foreground text-lg\"></i>\n                </div>\n                <div>\n                  <h1 className=\"text-xl font-bold text-foreground\">한국어 텍스트 배틀</h1>\n                  <p className=\"text-xs text-muted-foreground\">의미 유사도 경쟁 게임</p>\n                </div>\n              </div>\n              <AuthNavigation />\n            </div>\n          </header>\n\n          <Router />\n          <Toaster />\n        </div>\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":2503},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(236, 25%, 7%);\n  --foreground: hsl(210, 40%, 98%);\n  --card: hsl(236, 25%, 12%);\n  --card-foreground: hsl(210, 40%, 98%);\n  --popover: hsl(236, 25%, 12%);\n  --popover-foreground: hsl(210, 40%, 98%);\n  --primary: hsl(245, 83%, 68%);\n  --primary-foreground: hsl(210, 40%, 98%);\n  --secondary: hsl(236, 25%, 20%);\n  --secondary-foreground: hsl(210, 40%, 98%);\n  --muted: hsl(236, 25%, 15%);\n  --muted-foreground: hsl(215, 20%, 65%);\n  --accent: hsl(214, 95%, 58%);\n  --accent-foreground: hsl(210, 40%, 98%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(210, 40%, 98%);\n  --border: hsl(236, 25%, 20%);\n  --input: hsl(236, 25%, 15%);\n  --ring: hsl(245, 83%, 68%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  --radius: 0.75rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground;\n    font-family: 'Noto Sans KR', 'Inter', sans-serif;\n    background: linear-gradient(135deg, var(--background) 0%, hsl(236, 25%, 10%) 100%);\n    min-height: 100vh;\n  }\n}\n\n@layer components {\n  .game-glow {\n    box-shadow: 0 0 20px rgba(99, 102, 241, 0.3);\n  }\n  \n  .round-dot-active {\n    background: linear-gradient(135deg, var(--primary), var(--accent));\n    box-shadow: 0 0 10px rgba(99, 102, 241, 0.5);\n  }\n  \n  .score-highlight {\n    background: linear-gradient(135deg, hsl(43, 74%, 66%), hsl(45, 93%, 55%));\n    color: hsl(45, 100%, 15%);\n  }\n}\n\n@layer utilities {\n  .animate-bounce-slow {\n    animation: bounce 3s infinite;\n  }\n  \n  .animate-pulse-fast {\n    animation: pulse 1s infinite;\n  }\n  \n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n  \n  .animate-slide-up {\n    animation: slideUp 0.3s ease-out;\n  }\n}\n\n@keyframes fadeIn {\n  0% { \n    opacity: 0; \n    transform: translateY(10px); \n  }\n  100% { \n    opacity: 1; \n    transform: translateY(0); \n  }\n}\n\n@keyframes slideUp {\n  0% { \n    transform: translateY(20px); \n    opacity: 0; \n  }\n  100% { \n    transform: translateY(0); \n    opacity: 1; \n  }\n}\n","size_bytes":2192},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/services/botPlayer.ts":{"content":"import { word2vecService } from \"./word2vec\";\n\ntype BotDifficulty = \"easy\" | \"normal\" | \"hard\";\n\ninterface BotStrategy {\n  targetScoreRange: [number, number];\n  thinkingDelay: [number, number];\n}\n\nclass BotPlayer {\n  private strategies: Record<BotDifficulty, BotStrategy> = {\n    easy: {\n      targetScoreRange: [40, 70],\n      thinkingDelay: [800, 1500]\n    },\n    normal: {\n      targetScoreRange: [60, 85],\n      thinkingDelay: [600, 1200]\n    },\n    hard: {\n      targetScoreRange: [75, 95],\n      thinkingDelay: [400, 800]\n    }\n  };\n\n  async selectWord(targetWord: string, difficulty: BotDifficulty = \"normal\"): Promise<string> {\n    const strategy = this.strategies[difficulty];\n    \n    // TODO: In production, use pre-calculated nearest words from Semantle-ko\n    // This would come from process_similar.py and nearest word calculations\n    \n    // For development, select a word that would score in target range\n    const candidates = this.getWordCandidates();\n    const scoredCandidates = candidates.map(word => {\n      try {\n        const result = word2vecService.calculateSimilarity(word, targetWord);\n        return { word, score: result.similarity };\n      } catch {\n        return { word, score: 0 };\n      }\n    });\n\n    // Filter by target score range\n    const [minScore, maxScore] = strategy.targetScoreRange;\n    const viableCandidates = scoredCandidates.filter(\n      c => c.score >= minScore && c.score <= maxScore\n    );\n\n    if (viableCandidates.length === 0) {\n      // Fallback to any random word\n      return candidates[Math.floor(Math.random() * candidates.length)];\n    }\n\n    // Select randomly from viable candidates\n    const selected = viableCandidates[Math.floor(Math.random() * viableCandidates.length)];\n    return selected.word;\n  }\n\n  private getWordCandidates(): string[] {\n    // TODO: Use full Korean word list from Semantle-ko's filtered words\n    // This should be loaded from the processed word database\n    return [\n      '가족', '집안', '가정', '부모', '자녀', '형제', '자매', '조부모',\n      '학교', '교육', '공부', '선생님', '학생', '수업', '시험', '숙제',\n      '음식', '요리', '밥', '식당', '맛', '반찬', '국물', '간식',\n      '친구', '사람', '동료', '지인', '관계', '인간', '개인', '사회',\n      '사랑', '마음', '감정', '기분', '생각', '느낌', '의견', '판단',\n      '집', '방', '건물', '아파트', '마을', '도시', '나라', '세계',\n      '시간', '날짜', '년도', '계절', '오늘', '내일', '어제', '미래',\n      '일', '직업', '회사', '사업', '경제', '돈', '가격', '비용',\n      '건강', '병원', '의사', '약', '운동', '몸', '마음', '정신',\n      '문화', '예술', '음악', '영화', '책', '소설', '시', '문학'\n    ];\n  }\n\n  getThinkingDelay(difficulty: BotDifficulty = \"normal\"): number {\n    const [min, max] = this.strategies[difficulty].thinkingDelay;\n    return Math.random() * (max - min) + min;\n  }\n}\n\nexport const botPlayer = new BotPlayer();\n","size_bytes":3040},"server/services/gameEngine.ts":{"content":"import { type Game, type GameSubmission, type RoundData } from \"@shared/schema\";\nimport { storage } from \"../storage\";\nimport { word2vecService } from \"./word2vec\";\nimport { botPlayer } from \"./botPlayer\";\n\ninterface RoundResult {\n  gameId: string;\n  round: number;\n  myScore: number;\n  opponentScore: number;\n  myWord: string;\n  opponentWord: string;\n  roundComplete: boolean;\n  gameComplete: boolean;\n  winner?: string;\n}\n\nclass GameEngine {\n  private roundTimers: Map<string, NodeJS.Timeout> = new Map();\n  \n  async submitWord(gameId: string, userId: string, word: string): Promise<RoundResult> {\n    const game = await storage.getGame(gameId);\n    if (!game) {\n      throw new Error(\"Game not found\");\n    }\n\n    if (game.status !== \"active\") {\n      throw new Error(\"Game is not active\");\n    }\n\n    // Validate word\n    if (!word2vecService.isValidWord(word)) {\n      throw new Error(\"Invalid word\");\n    }\n\n    // Check for duplicate submission in same round\n    const existingSubmissions = await storage.getSubmissionsByRound(gameId, game.currentRound);\n    const userSubmission = existingSubmissions.find(s => s.userId === userId);\n    if (userSubmission) {\n      throw new Error(\"Already submitted for this round\");\n    }\n\n    // Check if opponent already used this word in current round\n    const opponentSubmission = existingSubmissions.find(s => s.userId !== userId);\n    if (opponentSubmission && opponentSubmission.word === word) {\n      throw new Error(\"Opponent already used this word\");\n    }\n\n    // Check if user used this word in previous round\n    if (game.currentRound > 1) {\n      const prevSubmissions = await storage.getSubmissionsByRound(gameId, game.currentRound - 1);\n      const userPrevSubmission = prevSubmissions.find(s => s.userId === userId);\n      if (userPrevSubmission && userPrevSubmission.word === word) {\n        throw new Error(\"Cannot reuse word from previous round\");\n      }\n    }\n\n    // Calculate score using semantic similarity\n    // TODO: In production, use target word for the day/round\n    const targetWord = this.getTargetWord(gameId, game.currentRound);\n    const similarityResult = word2vecService.calculateSimilarity(word, targetWord);\n    const score = similarityResult.similarity;\n\n    // Create submission\n    await storage.createSubmission({\n      gameId,\n      userId,\n      round: game.currentRound,\n      word,\n      score\n    });\n\n    // Handle bot response if playing against bot\n    if (game.isBot && game.player2Id === \"bot\") {\n      setTimeout(async () => {\n        await this.handleBotSubmission(gameId, game.currentRound, targetWord);\n      }, Math.random() * 600 + 600); // 0.6-1.2s delay\n    }\n\n    // Check if round is complete\n    const roundSubmissions = await storage.getSubmissionsByRound(gameId, game.currentRound);\n    \n    if (roundSubmissions.length === 2 || (game.isBot && roundSubmissions.length === 1)) {\n      return await this.completeRound(gameId, game.currentRound);\n    }\n\n    // Return partial result (waiting for opponent)\n    return {\n      gameId,\n      round: game.currentRound,\n      myScore: score,\n      opponentScore: 0,\n      myWord: word,\n      opponentWord: \"\",\n      roundComplete: false,\n      gameComplete: false\n    };\n  }\n\n  private async handleBotSubmission(gameId: string, round: number, targetWord: string): Promise<void> {\n    const botWord = await botPlayer.selectWord(targetWord, \"normal\");\n    const similarityResult = word2vecService.calculateSimilarity(botWord, targetWord);\n    \n    await storage.createSubmission({\n      gameId,\n      userId: \"bot\",\n      round,\n      word: botWord,\n      score: similarityResult.similarity\n    });\n\n    // Complete the round\n    await this.completeRound(gameId, round);\n  }\n\n  private async completeRound(gameId: string, round: number): Promise<RoundResult> {\n    const game = await storage.getGame(gameId);\n    if (!game) throw new Error(\"Game not found\");\n\n    const submissions = await storage.getSubmissionsByRound(gameId, round);\n    const player1Sub = submissions.find(s => s.userId === game.player1Id);\n    const player2Sub = submissions.find(s => s.userId === game.player2Id || s.userId === \"bot\");\n\n    // Clear round timer\n    const timerKey = `${gameId}-${round}`;\n    const timer = this.roundTimers.get(timerKey);\n    if (timer) {\n      clearTimeout(timer);\n      this.roundTimers.delete(timerKey);\n    }\n\n    // Update game rounds\n    const rounds = Array.isArray(game.rounds) ? [...game.rounds] : [];\n    const roundData: RoundData = {\n      round,\n      player1Word: player1Sub?.word,\n      player1Score: player1Sub?.score,\n      player2Word: player2Sub?.word,\n      player2Score: player2Sub?.score,\n      completed: true,\n      completedAt: new Date().toISOString()\n    };\n    rounds[round - 1] = roundData;\n\n    // Check if game is complete\n    const gameComplete = round === 5;\n    let winnerId: string | undefined;\n    \n    if (gameComplete) {\n      winnerId = this.determineWinner(rounds, game.player1Id, game.player2Id || \"bot\");\n    }\n\n    // Update game state\n    await storage.updateGame(gameId, {\n      rounds,\n      currentRound: gameComplete ? round : round + 1,\n      status: gameComplete ? \"completed\" : \"active\",\n      winnerId\n    });\n\n    // Start next round timer if game continues\n    if (!gameComplete) {\n      this.startRoundTimer(gameId, round + 1);\n    }\n\n    return {\n      gameId,\n      round,\n      myScore: player1Sub?.score || 0,\n      opponentScore: player2Sub?.score || 0,\n      myWord: player1Sub?.word || \"\",\n      opponentWord: player2Sub?.word || \"\",\n      roundComplete: true,\n      gameComplete,\n      winner: winnerId\n    };\n  }\n\n  private determineWinner(rounds: RoundData[], player1Id: string, player2Id: string): string | undefined {\n    const player1Scores = rounds.map(r => r.player1Score || 0);\n    const player2Scores = rounds.map(r => r.player2Score || 0);\n    \n    // Sort scores to find best performances\n    const p1Sorted = [...player1Scores].sort((a, b) => b - a);\n    const p2Sorted = [...player2Scores].sort((a, b) => b - a);\n    \n    // Compare best scores first, then second best, etc.\n    for (let i = 0; i < 5; i++) {\n      if (p1Sorted[i] > p2Sorted[i]) return player1Id;\n      if (p2Sorted[i] > p1Sorted[i]) return player2Id;\n    }\n    \n    return undefined; // Tie\n  }\n\n  startRoundTimer(gameId: string, round: number): void {\n    const timerKey = `${gameId}-${round}`;\n    \n    const timer = setTimeout(async () => {\n      // Handle round timeout - submit 0 scores for missing submissions\n      const submissions = await storage.getSubmissionsByRound(gameId, round);\n      const game = await storage.getGame(gameId);\n      \n      if (!game || submissions.length === 2) return;\n\n      // Create timeout submissions for missing players\n      if (submissions.length === 0) {\n        // Both players timed out\n        await Promise.all([\n          storage.createSubmission({\n            gameId,\n            userId: game.player1Id,\n            round,\n            word: \"\",\n            score: 0\n          }),\n          storage.createSubmission({\n            gameId,\n            userId: game.player2Id || \"bot\",\n            round,\n            word: \"\",\n            score: 0\n          })\n        ]);\n      } else if (submissions.length === 1) {\n        // One player timed out\n        const existingUserId = submissions[0].userId;\n        const missingUserId = existingUserId === game.player1Id ? \n          (game.player2Id || \"bot\") : game.player1Id;\n        \n        await storage.createSubmission({\n          gameId,\n          userId: missingUserId,\n          round,\n          word: \"\",\n          score: 0\n        });\n      }\n\n      // Complete the round\n      await this.completeRound(gameId, round);\n      this.roundTimers.delete(timerKey);\n    }, 15000); // 15 second timeout\n\n    this.roundTimers.set(timerKey, timer);\n  }\n\n  private getTargetWord(gameId: string, round: number): string {\n    // TODO: Implement daily target word system like Semantle-ko\n    // For now, return a fixed target word per game+round\n    const words = ['가족', '학교', '음식', '친구', '사랑'];\n    return words[(gameId.length + round) % words.length];\n  }\n\n  async createGame(player1Id: string, player2Id?: string, isBot: boolean = false): Promise<Game> {\n    const game = await storage.createGame({\n      player1Id,\n      player2Id: isBot ? \"bot\" : player2Id,\n      isBot,\n      botDifficulty: isBot ? \"normal\" : undefined,\n      status: \"active\",\n      currentRound: 1,\n      rounds: []\n    });\n\n    // Start first round timer\n    this.startRoundTimer(game.id, 1);\n\n    return game;\n  }\n}\n\nexport const gameEngine = new GameEngine();\n","size_bytes":8650},"server/services/word2vec.ts":{"content":"// Korean word similarity service based on Semantle-ko's word2vec.py\n// TODO: Integrate with FastText Korean embeddings for production\n\ninterface WordVector {\n  word: string;\n  vector: number[];\n}\n\ninterface SimilarityResult {\n  similarity: number;\n  rank?: string;\n}\n\nclass Word2VecService {\n  private wordVectors: Map<string, number[]> = new Map();\n  private isLoaded = false;\n\n  constructor() {\n    this.loadSampleVectors();\n  }\n\n  private loadSampleVectors() {\n    // TODO: Replace with actual FastText Korean embeddings loading\n    // This should load from cc.ko.300.vec or pre-processed vectors\n    // For now, using simplified mock vectors for development\n    const sampleWords = [\n      // 가족 관련\n      '가족', '집안', '가정', '부모', '자녀', '형제', '자매', '조부모', '사촌',\n      // 교육 관련  \n      '학교', '교육', '공부', '선생님', '학생', '수업', '시험', '숙제', '대학',\n      // 음식 관련\n      '음식', '요리', '밥', '식당', '맛', '반찬', '국물', '간식', '녹차',\n      // 인간관계\n      '친구', '사람', '동료', '지인', '관계', '인간', '개인', '사회', '이웃',\n      // 감정 및 생각\n      '사랑', '마음', '감정', '기분', '생각', '느낌', '의견', '판단', '지혜',\n      // 공간 및 장소\n      '집', '방', '건물', '아파트', '마을', '도시', '나라', '세계', '지구',\n      // 시간 개념\n      '시간', '날짜', '년도', '계절', '오늘', '내일', '어제', '미래', '과거',\n      // 직업 및 경제\n      '일', '직업', '회사', '사업', '경제', '돈', '가격', '비용', '수입',\n      // 건강 및 의료\n      '건강', '병원', '의사', '약', '운동', '몸', '마음', '정신', '치료',\n      // 문화 및 예술\n      '문화', '예술', '음악', '영화', '책', '소설', '시', '문학', '그림',\n      // 자연 및 환경\n      '자연', '환경', '나무', '산', '바다', '강', '하늘', '구름', '비',\n      // 기술 및 과학\n      '기술', '과학', '컴퓨터', '인터넷', '프로그램', '데이터', '인공지능', '로봇'\n    ];\n\n    // Generate mock vectors (in production, load from FastText embeddings)\n    sampleWords.forEach((word, index) => {\n      const vector = Array(300).fill(0).map(() => Math.random() * 2 - 1);\n      this.wordVectors.set(word, vector);\n    });\n\n    this.isLoaded = true;\n  }\n\n  // TODO: Production implementation should load from:\n  // 1. FastText Korean vectors: cc.ko.300.vec.gz\n  // 2. Filtered word list from filter_words.py\n  // 3. Pre-calculated similarities from process_similar.py\n  async loadProductionVectors(): Promise<void> {\n    // Implementation for loading actual FastText embeddings\n    // const vectorData = await loadFastTextVectors('data/cc.ko.300.vec');\n    // this.wordVectors = new Map(vectorData);\n    throw new Error(\"Production vector loading not implemented yet\");\n  }\n\n  getWordVector(word: string): number[] | undefined {\n    return this.wordVectors.get(word);\n  }\n\n  calculateSimilarity(word1: string, word2: string): SimilarityResult {\n    const vec1 = this.getWordVector(word1);\n    const vec2 = this.getWordVector(word2);\n\n    if (!vec1 || !vec2) {\n      throw new Error(`Word not found in vocabulary: ${!vec1 ? word1 : word2}`);\n    }\n\n    const similarity = this.cosineSimilarity(vec1, vec2);\n    \n    // Convert to percentage score (0-100)\n    const score = Math.round((similarity + 1) * 50);\n    \n    return {\n      similarity: score,\n      rank: score > 90 ? \"상위 10위\" : score > 70 ? \"상위 100위\" : \"100위 이상\"\n    };\n  }\n\n  private cosineSimilarity(vec1: number[], vec2: number[]): number {\n    const dotProduct = vec1.reduce((sum, a, i) => sum + a * vec2[i], 0);\n    const magnitude1 = Math.sqrt(vec1.reduce((sum, a) => sum + a * a, 0));\n    const magnitude2 = Math.sqrt(vec2.reduce((sum, a) => sum + a * a, 0));\n    \n    return dotProduct / (magnitude1 * magnitude2);\n  }\n\n  isValidWord(word: string): boolean {\n    return this.wordVectors.has(word);\n  }\n\n  getRandomWord(): string {\n    const words = Array.from(this.wordVectors.keys());\n    return words[Math.floor(Math.random() * words.length)];\n  }\n\n  getSuggestions(query: string, limit: number = 8): string[] {\n    const words = Array.from(this.wordVectors.keys());\n    return words\n      .filter(word => word.includes(query))\n      .slice(0, limit);\n  }\n}\n\nexport const word2vecService = new Word2VecService();\n","size_bytes":4453},"client/src/components/MatchBanner.tsx":{"content":"import { Button } from \"@/components/ui/button\";\n\ninterface MatchBannerProps {\n  isActive: boolean;\n  secondsElapsed: number;\n  canStartBot: boolean;\n  onStartBot: () => void;\n}\n\nexport default function MatchBanner({ \n  isActive, \n  secondsElapsed, \n  canStartBot, \n  onStartBot \n}: MatchBannerProps) {\n  if (!isActive) return null;\n\n  const remaining = Math.max(0, 12 - secondsElapsed);\n\n  return (\n    <div className=\"bg-accent/10 border border-accent rounded-xl p-6 space-y-4 animate-fade-in\" data-testid=\"component-match-banner\">\n      <div className=\"flex items-center justify-center space-x-3\">\n        <div className=\"w-2 h-2 bg-accent rounded-full animate-pulse\"></div>\n        <span className=\"text-accent font-medium\">\n          {secondsElapsed >= 6 ? '상대를 찾는 중...' : '매칭 중...'}\n        </span>\n        <span className=\"text-accent-foreground/60\">\n          ({remaining}초 남음)\n        </span>\n      </div>\n      \n      {canStartBot && (\n        <Button\n          variant=\"secondary\"\n          size=\"lg\"\n          className=\"w-full\"\n          onClick={onStartBot}\n          data-testid=\"button-start-bot-match\"\n        >\n          지금 연습전 시작하기\n        </Button>\n      )}\n    </div>\n  );\n}\n","size_bytes":1238},"client/src/components/ResultModal.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\ninterface ResultModalProps {\n  gameState: any;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport default function ResultModal({ gameState, isOpen, onClose }: ResultModalProps) {\n  const [, setLocation] = useLocation();\n  \n  if (!gameState) return null;\n\n  const rounds = gameState.rounds || [];\n  const myTotalScore = rounds.reduce((sum: number, round: any) => sum + (round.player1Score || 0), 0);\n  const opponentTotalScore = rounds.reduce((sum: number, round: any) => sum + (round.player2Score || 0), 0);\n  \n  let resultTitle = \"무승부!\";\n  let resultIcon = \"fas fa-handshake\";\n  let resultSubtitle = \"박빙의 승부였습니다\";\n  \n  if (gameState.winnerId === localStorage.getItem('userId')) {\n    resultTitle = \"승리!\";\n    resultIcon = \"fas fa-trophy\";\n    resultSubtitle = \"축하합니다! 상대방을 이겼습니다\";\n  } else if (gameState.winnerId && gameState.winnerId !== \"bot\") {\n    resultTitle = \"패배\";\n    resultIcon = \"fas fa-medal\";\n    resultSubtitle = \"다음엔 더 잘할 수 있어요!\";\n  } else if (gameState.winnerId === \"bot\") {\n    resultTitle = \"패배\";\n    resultIcon = \"fas fa-robot\";\n    resultSubtitle = \"봇에게 졌지만 좋은 연습이었어요!\";\n  }\n\n  const handlePlayAgain = () => {\n    onClose();\n    setLocation('/');\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"max-w-lg\">\n        <div className=\"p-6 animate-slide-up\" data-testid=\"modal-game-result\">\n          {/* Victory/Defeat Header */}\n          <div className=\"text-center mb-6\">\n            <div className=\"w-20 h-20 mx-auto mb-4 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center\">\n              <i className={`${resultIcon} text-3xl text-primary-foreground`}></i>\n            </div>\n            <DialogHeader>\n              <DialogTitle className=\"text-3xl font-bold text-card-foreground mb-2\">\n                {resultTitle}\n              </DialogTitle>\n            </DialogHeader>\n            <p className=\"text-muted-foreground\">{resultSubtitle}</p>\n          </div>\n          \n          {/* Final Scores */}\n          <div className=\"bg-secondary/30 rounded-xl p-6 mb-6\">\n            <h3 className=\"text-lg font-semibold text-card-foreground mb-4 text-center\">최종 점수</h3>\n            \n            <div className=\"space-y-3\">\n              {rounds.map((round: any, index: number) => (\n                <div key={index} className=\"flex justify-between items-center py-2 px-3 rounded-lg bg-background/30\">\n                  <span className=\"text-sm text-muted-foreground\">라운드 {index + 1}</span>\n                  <div className=\"flex items-center space-x-4\">\n                    <span className={`px-3 py-1 rounded-full text-sm font-semibold ${\n                      (round.player1Score || 0) > (round.player2Score || 0) \n                        ? 'score-highlight' \n                        : 'bg-muted'\n                    }`} data-testid={`result-my-score-${index + 1}`}>\n                      {round.player1Score || 0}점\n                    </span>\n                    <span className=\"text-muted-foreground\">vs</span>\n                    <span className={`px-3 py-1 rounded-full text-sm font-semibold ${\n                      (round.player2Score || 0) > (round.player1Score || 0) \n                        ? 'score-highlight' \n                        : 'bg-muted'\n                    }`} data-testid={`result-opponent-score-${index + 1}`}>\n                      {round.player2Score || 0}점\n                    </span>\n                  </div>\n                </div>\n              ))}\n            </div>\n            \n            {/* Total Score */}\n            <div className=\"mt-4 pt-4 border-t border-border\">\n              <div className=\"flex justify-between items-center\">\n                <span className=\"font-semibold text-card-foreground\">최종 합계</span>\n                <div className=\"flex items-center space-x-4\">\n                  <span className=\"text-xl font-bold text-primary\" data-testid=\"text-final-my-total\">\n                    {myTotalScore}점\n                  </span>\n                  <span className=\"text-muted-foreground\">vs</span>\n                  <span className=\"text-xl font-bold text-muted-foreground\" data-testid=\"text-final-opponent-total\">\n                    {opponentTotalScore}점\n                  </span>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          {/* Action Buttons */}\n          <div className=\"grid grid-cols-2 gap-4\">\n            <Button\n              variant=\"secondary\"\n              onClick={onClose}\n              data-testid=\"button-return-home\"\n            >\n              홈으로\n            </Button>\n            <Button\n              onClick={handlePlayAgain}\n              data-testid=\"button-play-again\"\n            >\n              다시 대전\n            </Button>\n          </div>\n        </div>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5173},"client/src/components/RoundDots.tsx":{"content":"interface RoundDotsProps {\n  currentRound: number;\n  totalRounds?: number;\n}\n\nexport default function RoundDots({ currentRound, totalRounds = 5 }: RoundDotsProps) {\n  return (\n    <div className=\"flex space-x-2\" data-testid=\"component-round-dots\">\n      {Array.from({ length: totalRounds }, (_, index) => {\n        const round = index + 1;\n        const isActive = round === currentRound;\n        const isCompleted = round < currentRound;\n        const isPending = round > currentRound;\n\n        return (\n          <div\n            key={round}\n            className={`w-3 h-3 rounded-full transition-all duration-200 ${\n              isActive \n                ? 'round-dot-active' \n                : isCompleted \n                ? 'bg-primary/60' \n                : 'border-2 border-primary/40 bg-transparent'\n            }`}\n            data-testid={`dot-round-${round}`}\n            title={`라운드 ${round}${isActive ? ' (진행 중)' : isCompleted ? ' (완료)' : ' (대기 중)'}`}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","size_bytes":1041},"client/src/components/ScoreRow.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\n\ninterface Round {\n  round: number;\n  player1Word?: string;\n  player1Score?: number;\n  player2Word?: string;\n  player2Score?: number;\n  completed: boolean;\n}\n\ninterface ScoreRowProps {\n  rounds: Round[];\n  myBestScore: number;\n  opponentBestScore: number;\n}\n\nexport default function ScoreRow({ rounds, myBestScore, opponentBestScore }: ScoreRowProps) {\n  // Find the rounds with best scores\n  const myBestRound = rounds.findIndex(r => r.player1Score === myBestScore);\n  const opponentBestRound = rounds.findIndex(r => r.player2Score === opponentBestScore);\n\n  return (\n    <Card className=\"bg-card shadow-lg\">\n      <CardContent className=\"p-6\">\n        <h3 className=\"text-lg font-semibold text-card-foreground mb-4\">라운드 기록</h3>\n        \n        <div className=\"space-y-3\">\n          {Array.from({ length: 5 }, (_, index) => {\n            const round = rounds[index];\n            const roundNumber = index + 1;\n            const isCompleted = round?.completed;\n            const isMyBest = myBestRound === index && round?.player1Score === myBestScore;\n            const isOpponentBest = opponentBestRound === index && round?.player2Score === opponentBestScore;\n            \n            return (\n              <div \n                key={roundNumber}\n                className={`grid grid-cols-12 gap-4 items-center py-3 px-4 rounded-lg transition-colors ${\n                  isCompleted \n                    ? 'bg-secondary/30' \n                    : roundNumber === (rounds.length + 1)\n                    ? 'bg-accent/10 border border-accent/30'\n                    : 'bg-muted/30'\n                }`}\n                data-testid={`row-round-${roundNumber}`}\n              >\n                <div className=\"col-span-2 flex items-center space-x-2\">\n                  <span className=\"text-sm font-medium text-muted-foreground\">\n                    라운드 {roundNumber}\n                  </span>\n                  {isMyBest && myBestScore > 0 && (\n                    <i className=\"fas fa-crown text-yellow-400 text-sm\" title=\"내 최고점\"></i>\n                  )}\n                </div>\n                \n                {isCompleted ? (\n                  <>\n                    <div className=\"col-span-5\">\n                      <div className=\"text-sm text-muted-foreground\">내 점수</div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-semibold text-foreground\" data-testid={`text-my-score-${roundNumber}`}>\n                          {round.player1Score || 0}점\n                        </span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          ({round.player1Word || '-'})\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"col-span-5\">\n                      <div className=\"text-sm text-muted-foreground\">상대 점수</div>\n                      <div className=\"flex items-center space-x-2\">\n                        <span className=\"font-semibold text-foreground\" data-testid={`text-opponent-score-${roundNumber}`}>\n                          {round.player2Score || 0}점\n                        </span>\n                        <span className=\"text-xs text-muted-foreground\">\n                          ({round.player2Word || '-'})\n                        </span>\n                        {isOpponentBest && opponentBestScore > 0 && (\n                          <i className=\"fas fa-crown text-yellow-400 text-sm\" title=\"상대 최고점\"></i>\n                        )}\n                      </div>\n                    </div>\n                  </>\n                ) : roundNumber === (rounds.length + 1) ? (\n                  <div className=\"col-span-10 text-center\">\n                    <span className=\"text-accent font-medium\">진행 중...</span>\n                  </div>\n                ) : (\n                  <div className=\"col-span-10 text-center\">\n                    <span className=\"text-muted-foreground text-sm\">대기 중</span>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n        </div>\n        \n        {/* Current Totals */}\n        <div className=\"mt-6 pt-4 border-t border-border\">\n          <div className=\"flex justify-between items-center\">\n            <div className=\"text-center\">\n              <div className=\"text-sm text-muted-foreground\">내 최고점</div>\n              <div className=\"text-xl font-bold text-primary\" data-testid=\"text-total-my-best\">\n                {myBestScore}점\n              </div>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"text-sm text-muted-foreground\">상대 최고점</div>\n              <div className=\"text-xl font-bold text-accent\" data-testid=\"text-total-opponent-best\">\n                {opponentBestScore}점\n              </div>\n            </div>\n          </div>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5053},"client/src/components/WordInput.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\n\ninterface WordInputProps {\n  onSubmit: (word: string) => Promise<void>;\n  disabled?: boolean;\n  gameId: string | null;\n}\n\nexport default function WordInput({ onSubmit, disabled = false, gameId }: WordInputProps) {\n  const [word, setWord] = useState(\"\");\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  // Fetch word suggestions\n  const { data: suggestions } = useQuery({\n    queryKey: ['/api/words/suggest', word],\n    enabled: word.length >= 1,\n    staleTime: 30000, // Cache suggestions for 30 seconds\n  }) as { data?: { suggestions: string[] } };\n\n  useEffect(() => {\n    if (word.length >= 1 && suggestions?.suggestions && suggestions.suggestions.length > 0) {\n      setShowSuggestions(true);\n    } else {\n      setShowSuggestions(false);\n    }\n  }, [word, suggestions]);\n\n  const handleSubmit = async () => {\n    if (!word.trim() || isSubmitting || disabled) return;\n    \n    try {\n      setIsSubmitting(true);\n      setShowSuggestions(false);\n      await onSubmit(word.trim());\n      setWord(\"\");\n    } catch (error) {\n      console.error('Word submission error:', error);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleSuggestionClick = (suggestion: string) => {\n    setWord(suggestion);\n    setShowSuggestions(false);\n    inputRef.current?.focus();\n  };\n\n  const handleKeyDown = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.nativeEvent.isComposing) {\n      e.preventDefault();\n      handleSubmit();\n    } else if (e.key === 'Escape') {\n      setShowSuggestions(false);\n    }\n  };\n\n  return (\n    <Card className=\"bg-card shadow-lg relative overflow-hidden\">\n      <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 via-transparent to-accent/5\"></div>\n      <CardContent className=\"p-8 relative z-10\">\n        <div className=\"text-center mb-8\">\n          <h2 className=\"text-2xl font-bold text-card-foreground mb-2\">단어를 입력하세요</h2>\n          <p className=\"text-muted-foreground\">목표 단어와 가장 유사한 의미의 단어를 찾아보세요</p>\n        </div>\n        \n        <div className=\"max-w-md mx-auto space-y-4 relative\">\n          <div className=\"relative\">\n            <Input\n              ref={inputRef}\n              type=\"text\"\n              value={word}\n              onChange={(e) => setWord(e.target.value)}\n              onKeyDown={handleKeyDown}\n              placeholder=\"단어를 입력하세요...\"\n              className=\"h-16 text-lg font-medium text-center\"\n              disabled={disabled || isSubmitting}\n              data-testid=\"input-word\"\n              autoFocus\n            />\n            \n            {/* Autocomplete Dropdown */}\n            {showSuggestions && suggestions?.suggestions && (\n              <div className=\"absolute top-full left-0 right-0 mt-2 bg-popover border border-border rounded-lg shadow-xl max-h-48 overflow-y-auto z-20\">\n                {suggestions.suggestions.map((suggestion: string, index: number) => (\n                  <div\n                    key={`${suggestion}-${index}`}\n                    className=\"px-4 py-3 hover:bg-accent/10 cursor-pointer border-b border-border last:border-b-0 transition-colors\"\n                    onClick={() => handleSuggestionClick(suggestion)}\n                    data-testid={`suggestion-${index}`}\n                  >\n                    <span className=\"text-popover-foreground\">{suggestion}</span>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n          \n          <Button\n            size=\"lg\"\n            className=\"w-full h-14 font-semibold\"\n            onClick={handleSubmit}\n            disabled={!word.trim() || disabled || isSubmitting}\n            data-testid=\"button-submit-word\"\n          >\n            {isSubmitting ? (\n              <>\n                <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                제출 중...\n              </>\n            ) : (\n              <>\n                <i className=\"fas fa-check mr-2\"></i>\n                제출하기\n              </>\n            )}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":4557},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/hooks/useGameState.ts":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { websocketManager } from \"@/lib/websocket\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport interface GameStateHook {\n  gameId: string | null;\n  gameState: any;\n  isLoading: boolean;\n  error: string | null;\n  submitWord: (word: string) => Promise<void>;\n  timeRemaining: number;\n}\n\nexport function useGameState(gameId: string | null): GameStateHook {\n  const [timeRemaining, setTimeRemaining] = useState(15);\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const { toast } = useToast();\n\n  // Fetch game status\n  const { data: gameState, isLoading, error, refetch } = useQuery({\n    queryKey: ['/api/game-status', gameId],\n    enabled: !!gameId,\n    refetchInterval: 1000, // Poll every second during active game\n  });\n\n  // WebSocket for real-time updates\n  useEffect(() => {\n    if (!gameId) return;\n\n    const connectWS = async () => {\n      try {\n        await websocketManager.connect();\n        websocketManager.joinGame(gameId);\n      } catch (error) {\n        console.error('WebSocket connection failed:', error);\n      }\n    };\n\n    connectWS();\n\n    // Subscribe to game events\n    const unsubscribeGameFound = websocketManager.subscribe('game_found', (message) => {\n      if (message.gameId === gameId) {\n        toast({\n          title: \"게임 시작\",\n          description: message.isBot ? \"봇과의 대전이 시작됩니다!\" : \"상대방을 찾았습니다!\",\n        });\n        refetch();\n      }\n    });\n\n    const unsubscribeRoundComplete = websocketManager.subscribe('round_complete', (message) => {\n      if (message.result.gameId === gameId) {\n        toast({\n          title: `라운드 ${message.result.round} 완료`,\n          description: `내 점수: ${message.result.myScore}점, 상대 점수: ${message.result.opponentScore}점`,\n        });\n        refetch();\n      }\n    });\n\n    return () => {\n      unsubscribeGameFound();\n      unsubscribeRoundComplete();\n    };\n  }, [gameId, refetch, toast]);\n\n  // Timer countdown\n  useEffect(() => {\n    if (!gameState || gameState?.status !== 'active') return;\n\n    const timer = setInterval(() => {\n      setTimeRemaining(prev => {\n        if (prev <= 0) {\n          clearInterval(timer);\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n\n    return () => clearInterval(timer);\n  }, [gameState?.currentRound]);\n\n  // Reset timer when round changes\n  useEffect(() => {\n    if (gameState?.currentRound) {\n      setTimeRemaining(15);\n    }\n  }, [gameState?.currentRound]);\n\n  const submitWord = async (word: string) => {\n    if (!gameId || isSubmitting) return;\n    \n    const userId = localStorage.getItem('userId');\n    if (!userId) return;\n\n    try {\n      setIsSubmitting(true);\n      await api.submitWord(gameId, userId, word);\n      \n      toast({\n        title: \"단어 제출 완료\",\n        description: \"상대방의 제출을 기다리고 있습니다...\",\n      });\n      \n      // Refetch to get updated state\n      refetch();\n    } catch (error: any) {\n      console.error('Submit word error:', error);\n      \n      let errorMessage = \"단어 제출 중 오류가 발생했습니다\";\n      if (error.message.includes(\"INVALID_WORD\")) {\n        errorMessage = \"사전에 없는 단어입니다\";\n      } else if (error.message.includes(\"ALREADY_SUBMITTED\")) {\n        errorMessage = \"이미 이 라운드에 단어를 제출했습니다\";\n      } else if (error.message.includes(\"WORD_CONFLICT\")) {\n        errorMessage = \"상대방이 이미 사용한 단어입니다\";\n      } else if (error.message.includes(\"WORD_REUSE\")) {\n        errorMessage = \"이전 라운드에서 사용한 단어는 다시 사용할 수 없습니다\";\n      }\n      \n      toast({\n        variant: \"destructive\",\n        title: \"제출 실패\",\n        description: errorMessage,\n      });\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return {\n    gameId,\n    gameState,\n    isLoading,\n    error: error?.message || null,\n    submitWord,\n    timeRemaining,\n  };\n}\n","size_bytes":4133},"client/src/lib/api.ts":{"content":"import { apiRequest as makeApiRequest } from \"./queryClient\";\n\nconst API_BASE = import.meta.env.VITE_API_BASE || \"/api\";\n\nexport interface MatchResult {\n  gameId?: string;\n  isBot?: boolean;\n  opponent?: {\n    nickname: string;\n  };\n  queuePosition?: number;\n  estimatedWait?: string;\n}\n\nexport interface SubmitResult {\n  gameId: string;\n  round: number;\n  myScore: number;\n  opponentScore: number;\n  myWord: string;\n  opponentWord: string;\n  roundComplete: boolean;\n  gameComplete: boolean;\n  winner?: string;\n}\n\nexport interface GameStatus {\n  gameId: string;\n  status: string;\n  currentRound: number;\n  timeRemaining: number;\n  rounds: any[];\n  myBestScore: number;\n  opponentBestScore: number;\n  isBot: boolean;\n  opponent: {\n    nickname: string;\n    type: \"human\" | \"bot\";\n  };\n}\n\nexport interface WordSuggestions {\n  suggestions: string[];\n}\n\nexport async function apiRequest(method: string, endpoint: string, body?: any): Promise<any> {\n  const url = endpoint.startsWith('http') ? endpoint : `${API_BASE}${endpoint}`;\n\n  const config: RequestInit = {\n    method,\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    credentials: 'include', // Include cookies for session management\n  };\n\n  if (body && method !== 'GET') {\n    config.body = JSON.stringify(body);\n  }\n\n  const response = await fetch(url, config);\n\n  // Check if response is HTML (likely a redirect or error page)\n  const contentType = response.headers.get('content-type');\n  if (contentType && !contentType.includes('application/json')) {\n    if (response.status === 401 || response.status === 403) {\n      throw new Error('UNAUTHORIZED');\n    }\n    throw new Error(`Invalid response type: ${contentType}`);\n  }\n\n  if (!response.ok) {\n    const errorData = await response.json().catch(() => ({ error: 'NETWORK_ERROR' }));\n    throw new Error(errorData.message || `HTTP ${response.status}`);\n  }\n\n  return response.json();\n}\n\nexport const api = {\n  // Auth\n  getCurrentUser: async () => {\n    try {\n      return await apiRequest('GET', '/api/auth/user');\n    } catch (error: any) {\n      if (error.message === 'UNAUTHORIZED') {\n        return null; // User not authenticated\n      }\n      console.error('Get current user error:', error);\n      return null;\n    }\n  },\n\n  logout: async () => {\n    await apiRequest('POST', '/api/auth/logout');\n  },\n\n  async createUser(nickname: string) {\n    return await apiRequest(\"POST\", \"/api/users\", { nickname });\n  },\n\n  async joinQueue(userId: string, language: string = \"ko\"): Promise<MatchResult> {\n    return await apiRequest(\"POST\", \"/api/queue/join\", { userId, language });\n  },\n\n  async submitWord(gameId: string, userId: string, word: string): Promise<SubmitResult> {\n    return await apiRequest(\"POST\", \"/api/game/submit\", { gameId, userId, word });\n  },\n\n  async getGameStatus(gameId: string): Promise<GameStatus> {\n    return await apiRequest(\"GET\", `/api/game-status/${gameId}`);\n  },\n\n  async getWordSuggestions(query: string, limit: number = 8): Promise<WordSuggestions> {\n    const params = new URLSearchParams({ q: query, limit: limit.toString() });\n    return await apiRequest(\"GET\", `/api/words/suggest?${params}`);\n  },\n\n  async validateWord(word: string) {\n    return await apiRequest(\"POST\", \"/api/words/validate\", { word });\n  },\n\n  async getUserStats(userId: string) {\n    return await apiRequest(\"GET\", `/api/users/${userId}/stats`);\n  }\n};","size_bytes":3391},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    let errorMessage = `${res.status}: ${res.statusText}`;\n    try {\n      const errorData = await res.json();\n      if (errorData.message) {\n        errorMessage = errorData.message;\n      }\n      throw new Error(`${res.status}: ${JSON.stringify(errorData)}`);\n    } catch (jsonError) {\n      throw new Error(errorMessage);\n    }\n  }\n}\n\nexport async function apiRequest(method: string, url: string, body?: any) {\n  let response: Response;\n\n  const headers: HeadersInit = {\n    'Content-Type': 'application/json',\n  };\n\n  try {\n    response = await fetch(url, {\n      method,\n      headers,\n      body: body ? JSON.stringify(body) : undefined,\n      credentials: 'include',\n    });\n\n    await throwIfResNotOk(response);\n    return response;\n  } catch (error) {\n    console.error(`API request failed: ${method} ${url}`, error);\n    throw error;\n  }\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});","size_bytes":1761},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/websocket.ts":{"content":"interface WebSocketMessage {\n  type: string;\n  [key: string]: any;\n}\n\ntype MessageHandler = (message: WebSocketMessage) => void;\n\nclass WebSocketManager {\n  private socket: WebSocket | null = null;\n  private handlers: Map<string, Set<MessageHandler>> = new Map();\n  private reconnectAttempts = 0;\n  private maxReconnectAttempts = 5;\n  private reconnectDelay = 1000;\n\n  connect(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      try {\n        const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n        const wsUrl = `${protocol}//${window.location.host}/ws`;\n        \n        this.socket = new WebSocket(wsUrl);\n\n        this.socket.onopen = () => {\n          console.log('WebSocket connected');\n          this.reconnectAttempts = 0;\n          resolve();\n        };\n\n        this.socket.onmessage = (event) => {\n          try {\n            const message: WebSocketMessage = JSON.parse(event.data);\n            this.handleMessage(message);\n          } catch (error) {\n            console.error('Failed to parse WebSocket message:', error);\n          }\n        };\n\n        this.socket.onclose = () => {\n          console.log('WebSocket disconnected');\n          this.attemptReconnect();\n        };\n\n        this.socket.onerror = (error) => {\n          console.error('WebSocket error:', error);\n          reject(error);\n        };\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n\n  private handleMessage(message: WebSocketMessage) {\n    const handlers = this.handlers.get(message.type);\n    if (handlers) {\n      handlers.forEach(handler => handler(message));\n    }\n  }\n\n  private attemptReconnect() {\n    if (this.reconnectAttempts >= this.maxReconnectAttempts) {\n      console.error('Max reconnection attempts reached');\n      return;\n    }\n\n    this.reconnectAttempts++;\n    \n    setTimeout(() => {\n      console.log(`Attempting to reconnect (${this.reconnectAttempts}/${this.maxReconnectAttempts})`);\n      this.connect().catch(console.error);\n    }, this.reconnectDelay * this.reconnectAttempts);\n  }\n\n  subscribe(messageType: string, handler: MessageHandler): () => void {\n    if (!this.handlers.has(messageType)) {\n      this.handlers.set(messageType, new Set());\n    }\n    \n    this.handlers.get(messageType)!.add(handler);\n    \n    // Return unsubscribe function\n    return () => {\n      this.handlers.get(messageType)?.delete(handler);\n    };\n  }\n\n  send(message: WebSocketMessage) {\n    if (this.socket?.readyState === WebSocket.OPEN) {\n      this.socket.send(JSON.stringify(message));\n    } else {\n      console.warn('WebSocket not connected');\n    }\n  }\n\n  joinGame(gameId: string) {\n    this.send({ type: 'join_game', gameId });\n  }\n\n  disconnect() {\n    if (this.socket) {\n      this.socket.close();\n      this.socket = null;\n    }\n    this.handlers.clear();\n  }\n}\n\nexport const websocketManager = new WebSocketManager();\n","size_bytes":2894},"client/src/pages/Game.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport RoundDots from \"@/components/RoundDots\";\nimport WordInput from \"@/components/WordInput\";\nimport ScoreRow from \"@/components/ScoreRow\";\nimport ResultModal from \"@/components/ResultModal\";\nimport { useGameState } from \"@/hooks/useGameState\";\n\nexport default function Game() {\n  const params = useParams<{ gameId?: string }>();\n  const gameId = params.gameId || null;\n  const [, setLocation] = useLocation();\n  \n  const { gameState, isLoading, submitWord, timeRemaining } = useGameState(gameId);\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"bg-card shadow-xl p-8\">\n          <CardContent className=\"text-center space-y-4\">\n            <div className=\"w-16 h-16 mx-auto border-4 border-primary border-t-transparent rounded-full animate-spin\"></div>\n            <h2 className=\"text-xl font-semibold text-card-foreground\">게임 로딩 중...</h2>\n            <p className=\"text-muted-foreground\">게임 상태를 불러오고 있습니다</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (!gameState || gameState.status === 'not_found') {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Card className=\"bg-card shadow-xl p-8\">\n          <CardContent className=\"text-center space-y-4\">\n            <div className=\"w-16 h-16 mx-auto bg-destructive rounded-full flex items-center justify-center\">\n              <i className=\"fas fa-exclamation text-destructive-foreground text-2xl\"></i>\n            </div>\n            <h2 className=\"text-xl font-semibold text-card-foreground\">게임을 찾을 수 없습니다</h2>\n            <p className=\"text-muted-foreground\">유효하지 않은 게임 ID입니다</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const isGameComplete = gameState.status === 'completed';\n  \n  return (\n    <main className=\"mx-auto max-w-4xl px-4 py-8 space-y-6\">\n      {/* Game Header */}\n      <Card className=\"bg-card shadow-lg\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center space-x-4\">\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-muted-foreground\">라운드</span>\n                <RoundDots currentRound={gameState.currentRound} />\n              </div>\n              <div className=\"h-6 w-px bg-border\"></div>\n              <div className=\"flex items-center space-x-2\">\n                <span className=\"text-sm text-muted-foreground\">상대:</span>\n                <span className=\"font-medium text-foreground\" data-testid=\"text-opponent-nickname\">\n                  {gameState.opponent?.nickname || \"상대방\"}\n                </span>\n                <span className={`text-xs px-2 py-1 rounded ${\n                  gameState.isBot \n                    ? 'bg-secondary text-secondary-foreground' \n                    : 'bg-accent/20 text-accent'\n                }`} data-testid=\"text-opponent-type\">\n                  {gameState.isBot ? '[봇]' : '[사람]'}\n                </span>\n              </div>\n            </div>\n            \n            {/* Timer */}\n            <div className=\"flex items-center space-x-3\">\n              <div className=\"text-right\">\n                <div className=\"text-sm text-muted-foreground\">남은 시간</div>\n                <div className={`text-2xl font-mono font-bold transition-colors ${\n                  timeRemaining <= 5 ? 'text-destructive' : 'text-accent'\n                }`} data-testid=\"text-time-remaining\">\n                  {Math.floor(timeRemaining / 60).toString().padStart(2, '0')}:\n                  {(timeRemaining % 60).toString().padStart(2, '0')}\n                </div>\n              </div>\n              <div className=\"w-12 h-12 relative\">\n                <div className=\"w-full h-full border-4 border-accent/20 rounded-full\"></div>\n                <div \n                  className=\"absolute inset-0 w-full h-full border-4 border-accent rounded-full transform -rotate-90 border-transparent border-t-accent transition-transform duration-1000\"\n                  style={{\n                    transform: `rotate(${((15 - timeRemaining) / 15) * 360 - 90}deg)`\n                  }}\n                ></div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Word Input Section */}\n      {!isGameComplete && gameState.status === 'active' && (\n        <WordInput \n          onSubmit={submitWord}\n          disabled={timeRemaining <= 0}\n          gameId={gameId}\n        />\n      )}\n\n      {/* Round History and Scores */}\n      <ScoreRow \n        rounds={gameState.rounds || []}\n        myBestScore={gameState.myBestScore}\n        opponentBestScore={gameState.opponentBestScore}\n      />\n\n      {/* Final Results Modal */}\n      {isGameComplete && (\n        <ResultModal\n          gameState={gameState}\n          isOpen={true}\n          onClose={() => setLocation('/')}\n        />\n      )}\n\n      {/* Game Statistics Sidebar (Desktop) */}\n      <aside className=\"hidden xl:block fixed right-4 top-1/2 transform -translate-y-1/2 w-64\">\n        <Card className=\"bg-card/80 backdrop-blur-sm shadow-lg\">\n          <CardContent className=\"p-6 space-y-4\">\n            <h3 className=\"text-lg font-semibold text-card-foreground border-b border-border pb-2\">\n              게임 통계\n            </h3>\n            \n            <div className=\"space-y-3\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-muted-foreground\">현재 라운드</span>\n                <span className=\"font-semibold text-foreground\" data-testid=\"text-current-round\">\n                  {gameState.currentRound}/5\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-muted-foreground\">내 최고점</span>\n                <span className=\"font-semibold text-primary\" data-testid=\"text-my-best-score\">\n                  {gameState.myBestScore}점\n                </span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-sm text-muted-foreground\">상대 최고점</span>\n                <span className=\"font-semibold text-accent\" data-testid=\"text-opponent-best-score\">\n                  {gameState.opponentBestScore}점\n                </span>\n              </div>\n            </div>\n            \n            <div className=\"pt-3 border-t border-border\">\n              <div className=\"text-xs text-muted-foreground text-center\">\n                Powered by FastText Korean Embeddings\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </aside>\n    </main>\n  );\n}\n","size_bytes":6957},"client/src/pages/Home.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\nimport MatchBanner from \"@/components/MatchBanner\";\nimport { useAuth } from \"@/hooks/useAuth\";\n\ninterface UserStats {\n  gamesPlayed: number;\n  gamesWon: number;\n  gamesLost: number;\n  winRate: number;\n  bestScore: number;\n  totalScore: number;\n  currentStreak: number;\n  bestStreak: number;\n  averageScore: number;\n}\n\nexport default function Home() {\n  const [, setLocation] = useLocation();\n  const [isMatchmaking, setIsMatchmaking] = useState(false);\n  const [matchmakingSeconds, setMatchmakingSeconds] = useState(0);\n  const [canStartBot, setCanStartBot] = useState(false);\n  const [userStats, setUserStats] = useState<UserStats | null>(null);\n  const [isLoadingStats, setIsLoadingStats] = useState(false);\n  const { toast } = useToast();\n  const { user, logout } = useAuth(); // Added for user authentication status\n\n  const handleQuickMatch = async () => {\n    const userId = localStorage.getItem('userId');\n    if (!userId) return;\n\n    try {\n      setIsMatchmaking(true);\n      setMatchmakingSeconds(0);\n      setCanStartBot(false);\n\n      // Start matchmaking timer\n      const timer = setInterval(() => {\n        setMatchmakingSeconds(prev => {\n          const newSeconds = prev + 1;\n\n          // Show bot option after 6 seconds\n          if (newSeconds >= 6) {\n            setCanStartBot(true);\n          }\n\n          // Auto-start bot match after 12 seconds\n          if (newSeconds >= 12) {\n            clearInterval(timer);\n            handleBotMatch();\n          }\n\n          return newSeconds;\n        });\n      }, 1000);\n\n      const result = await api.joinQueue(userId);\n\n      if (result.gameId) {\n        // Found immediate match\n        clearInterval(timer);\n        toast({\n          title: \"매칭 성공!\",\n          description: result.isBot ? \"봇과의 대전이 시작됩니다\" : \"상대방을 찾았습니다!\",\n        });\n        setLocation(`/game/${result.gameId}`);\n      }\n    } catch (error: any) {\n      console.error('Matchmaking error:', error);\n      setIsMatchmaking(false);\n      toast({\n        variant: \"destructive\",\n        title: \"매칭 실패\",\n        description: \"매칭 중 오류가 발생했습니다. 다시 시도해주세요.\",\n      });\n    }\n  };\n\n  const handleBotMatch = async () => {\n    let userId = localStorage.getItem('userId');\n\n    // Validate user exists - first check current user endpoint\n    try {\n      const currentUser = await api.getCurrentUser();\n      if (currentUser?.id) {\n        userId = currentUser.id;\n        localStorage.setItem('userId', currentUser.id);\n      } else {\n        // No session user, try to use localStorage userId if available\n        if (!userId) {\n          toast({\n            variant: \"destructive\",\n            title: \"로그인 필요\",\n            description: \"먼저 로그인해주세요.\",\n          });\n          setLocation('/');\n          return;\n        }\n        // Continue with localStorage userId\n      }\n    } catch (error: any) {\n      console.error('Current user check failed:', error);\n      // If API fails, try to use localStorage userId if available\n      if (!userId) {\n        localStorage.removeItem('userId');\n        toast({\n          variant: \"destructive\",\n          title: \"로그인 필요\",\n          description: \"먼저 로그인해주세요.\",\n        });\n        setLocation('/');\n        return;\n      }\n    }\n\n    if (!userId) return;\n\n    try {\n      setIsMatchmaking(false);\n\n      // Join queue which will automatically create bot game after timeout\n      const result = await api.joinQueue(userId);\n\n      if (result.gameId) {\n        toast({\n          title: \"봇 매칭 성공\",\n          description: \"AI 봇과의 대전이 시작됩니다!\",\n        });\n        setLocation(`/game/${result.gameId}`);\n      } else {\n        // If no immediate game, the server will create a bot game via timeout\n        toast({\n          title: \"봇 대전 준비 중\",\n          description: \"잠시 후 봇과의 대전이 시작됩니다.\",\n        });\n      }\n    } catch (error: any) {\n      console.error('Bot match error:', error);\n      setIsMatchmaking(false);\n\n      if (error.message?.includes('USER_NOT_FOUND')) {\n        localStorage.removeItem('userId');\n        toast({\n          variant: \"destructive\",\n          title: \"사용자 정보 오류\",\n          description: \"다시 로그인해주세요.\",\n        });\n        setLocation('/');\n      } else {\n        toast({\n          variant: \"destructive\",\n          title: \"봇 매칭 실패\",\n          description: \"봇과의 대전 생성에 실패했습니다.\",\n        });\n      }\n    }\n  };\n\n  const handlePracticeGame = () => {\n    handleBotMatch();\n  };\n\n  // Load user statistics\n  useEffect(() => {\n    const loadUserStats = async () => {\n      if (!user?.id) {\n        setIsLoadingStats(false);\n        return;\n      }\n\n      try {\n        setIsLoadingStats(true);\n        const stats = await api.getUserStats(user.id);\n        setUserStats(stats);\n      } catch (error: any) {\n        console.error('Failed to load user stats:', error);\n        // Set default stats if API fails or user not found\n        setUserStats({\n          gamesPlayed: 0,\n          gamesWon: 0,\n          gamesLost: 0,\n          winRate: 0,\n          bestScore: 0,\n          totalScore: 0,\n          currentStreak: 0,\n          bestStreak: 0,\n          averageScore: 0\n        });\n      } finally {\n        setIsLoadingStats(false);\n      }\n    };\n\n    loadUserStats();\n  }, [user?.id]); // Depend on user?.id to refetch stats when user changes\n\n  const handleLogout = async () => {\n    try {\n      await logout();\n      toast({\n        title: \"로그아웃 완료\",\n        description: \"성공적으로 로그아웃되었습니다.\",\n      });\n      setLocation('/');\n    } catch (error) {\n      console.error('Logout error:', error);\n      toast({\n        variant: \"destructive\",\n        title: \"로그아웃 실패\",\n        description: \"로그아웃 중 오류가 발생했습니다.\",\n      });\n    }\n  };\n\n  return (\n    <main className=\"mx-auto max-w-4xl px-4 py-8 space-y-8\">\n      {/* Main Content */}\n      <div className=\"flex-1 space-y-8\">\n        {/* Welcome Section */}\n        <div className=\"text-center space-y-4\">\n          <h1 className=\"text-4xl font-bold tracking-tight text-foreground\">\n            안녕하세요, {user?.nickname || \"플레이어\"}님! 👋\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto\">\n            단어의 의미적 유사성을 겨루는 흥미진진한 게임에 참여하세요\n          </p>\n        </div>\n\n        {/* User Statistics */}\n        {user && (\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">승률</CardTitle>\n                <i className=\"fas fa-trophy h-4 w-4 text-muted-foreground\"></i>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {isLoadingStats ? \"...\" : `${userStats?.winRate || 0}%`}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {isLoadingStats ? \"로딩 중...\" : `${userStats?.gamesPlayed || 0}게임 중 ${userStats?.gamesWon || 0}승`}\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">총 게임</CardTitle>\n                <i className=\"fas fa-gamepad h-4 w-4 text-muted-foreground\"></i>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {isLoadingStats ? \"...\" : userStats?.gamesPlayed || 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {isLoadingStats ? \"로딩 중...\" : `${userStats?.gamesWon || 0}승 ${userStats?.gamesLost || 0}패`}\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">최고 점수</CardTitle>\n                <i className=\"fas fa-star h-4 w-4 text-muted-foreground\"></i>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {isLoadingStats ? \"...\" : userStats?.bestScore || 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {isLoadingStats ? \"로딩 중...\" : `평균 ${userStats?.averageScore || 0}점`}\n                </p>\n              </CardContent>\n            </Card>\n\n            <Card>\n              <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n                <CardTitle className=\"text-sm font-medium\">연승 기록</CardTitle>\n                <i className=\"fas fa-fire h-4 w-4 text-muted-foreground\"></i>\n              </CardHeader>\n              <CardContent>\n                <div className=\"text-2xl font-bold\">\n                  {isLoadingStats ? \"...\" : userStats?.bestStreak || 0}\n                </div>\n                <p className=\"text-xs text-muted-foreground\">\n                  {isLoadingStats ? \"로딩 중...\" : `현재 ${userStats?.currentStreak || 0}연승`}\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        )}\n      </div>\n\n      {/* Quick Match Card */}\n      <Card className=\"bg-card shadow-lg game-glow mb-8\">\n        <CardContent className=\"p-8\">\n          <div className=\"text-center space-y-6\">\n            <div className=\"flex justify-center\">\n              <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center\">\n                <i className=\"fas fa-bolt text-2xl text-primary-foreground\"></i>\n              </div>\n            </div>\n            <h2 className=\"text-2xl font-bold text-card-foreground\">빠른 매칭</h2>\n            <p className=\"text-muted-foreground\">실시간으로 다른 플레이어와 대전하거나 봇과 연습해보세요</p>\n\n            {/* Match Banner */}\n            {isMatchmaking && (\n              <MatchBanner\n                isActive={isMatchmaking}\n                secondsElapsed={matchmakingSeconds}\n                canStartBot={canStartBot}\n                onStartBot={handleBotMatch}\n              />\n            )}\n\n            <Button\n              size=\"lg\"\n              className=\"w-full h-14 rounded-full font-semibold\"\n              onClick={handleQuickMatch}\n              disabled={isMatchmaking}\n              data-testid=\"button-quick-match\"\n            >\n              {isMatchmaking ? (\n                <>\n                  <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                  매칭 중...\n                </>\n              ) : (\n                <>\n                  <i className=\"fas fa-play mr-2\"></i>\n                  매칭 시작\n                </>\n              )}\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* User Statistics (Old Display, kept for reference but new one above is primary) */}\n      {/*\n      {userStats && (\n        <Card className=\"bg-card shadow-lg mb-8\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center space-x-2\">\n              <i className=\"fas fa-chart-bar text-primary\"></i>\n              <span>나의 게임 통계</span>\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n              <div className=\"text-center space-y-2\">\n                <div className=\"text-3xl font-bold text-primary\">{userStats.gamesPlayed}</div>\n                <div className=\"text-sm text-muted-foreground\">총 게임</div>\n              </div>\n              <div className=\"text-center space-y-2\">\n                <div className=\"text-3xl font-bold text-green-500\">{userStats.winRate}%</div>\n                <div className=\"text-sm text-muted-foreground\">승률</div>\n              </div>\n              <div className=\"text-center space-y-2\">\n                <div className=\"text-3xl font-bold text-accent\">{userStats.bestScore}</div>\n                <div className=\"text-sm text-muted-foreground\">최고 점수</div>\n              </div>\n              <div className=\"text-center space-y-2\">\n                <div className=\"text-3xl font-bold text-secondary\">{userStats.currentStreak}</div>\n                <div className=\"text-sm text-muted-foreground\">연승</div>\n              </div>\n            </div>\n\n            <div className=\"mt-6 pt-6 border-t border-border\">\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 text-sm\">\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">승리</span>\n                  <span className=\"font-semibold text-green-500\">{userStats.gamesWon}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">패배</span>\n                  <span className=\"font-semibold text-red-500\">{userStats.gamesLost}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">평균 점수</span>\n                  <span className=\"font-semibold text-foreground\">{userStats.averageScore}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">총 점수</span>\n                  <span className=\"font-semibold text-foreground\">{userStats.totalScore.toLocaleString()}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">최고 연승</span>\n                  <span className=\"font-semibold text-accent\">{userStats.bestStreak}</span>\n                </div>\n                <div className=\"flex justify-between\">\n                  <span className=\"text-muted-foreground\">현재 연승</span>\n                  <span className=\"font-semibold text-secondary\">{userStats.currentStreak}</span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {isLoadingStats && (\n        <Card className=\"bg-card shadow-lg mb-8\">\n          <CardContent className=\"p-8\">\n            <div className=\"text-center space-y-4\">\n              <i className=\"fas fa-spinner animate-spin text-2xl text-muted-foreground\"></i>\n              <p className=\"text-muted-foreground\">통계를 불러오는 중...</p>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      */}\n\n      {/* Additional Options */}\n      <div className=\"grid md:grid-cols-2 gap-6\">\n        <Card className=\"bg-card shadow-md hover:shadow-lg transition-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4 mb-4\">\n              <div className=\"w-12 h-12 bg-secondary rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-robot text-secondary-foreground\"></i>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-card-foreground\">봇과 연습전</h3>\n                <p className=\"text-sm text-muted-foreground\">AI 상대와 실력을 향상시켜보세요</p>\n              </div>\n            </div>\n            <Button\n              variant=\"secondary\"\n              className=\"w-full\"\n              onClick={handlePracticeGame}\n              data-testid=\"button-practice-game\"\n            >\n              연습 시작\n            </Button>\n          </CardContent>\n        </Card>\n\n        <Card className=\"bg-card shadow-md hover:shadow-lg transition-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center space-x-4 mb-4\">\n              <div className=\"w-12 h-12 bg-muted rounded-lg flex items-center justify-center\">\n                <i className=\"fas fa-history text-muted-foreground\"></i>\n              </div>\n              <div>\n                <h3 className=\"text-lg font-semibold text-card-foreground\">게임 기록</h3>\n                <p className=\"text-sm text-muted-foreground\">지난 대전 결과 확인</p>\n              </div>\n            </div>\n            <Button\n              variant=\"outline\"\n              className=\"w-full\"\n              onClick={() => window.location.href = '/game-history'}\n              data-testid=\"button-game-history\"\n            >\n              기록 보기\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </main>\n  );\n}","size_bytes":17295},"client/src/pages/Onboarding.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { api } from \"@/lib/api\";\n\ninterface OnboardingProps {\n  onComplete: () => void;\n}\n\nexport default function Onboarding({ onComplete }: OnboardingProps) {\n  const [nickname, setNickname] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { toast } = useToast();\n\n  const handleSubmit = async () => {\n    if (nickname.trim().length < 2) {\n      toast({\n        variant: \"destructive\",\n        title: \"닉네임 오류\",\n        description: \"닉네임은 2글자 이상 입력해주세요\",\n      });\n      return;\n    }\n\n    try {\n      setIsLoading(true);\n      \n      // Create or get user\n      const user = await api.createUser(nickname.trim());\n      \n      // Store user data in localStorage\n      localStorage.setItem('userNickname', user.nickname);\n      localStorage.setItem('userId', user.id);\n      \n      toast({\n        title: \"환영합니다!\",\n        description: `${user.nickname}님, 게임에 오신 것을 환영합니다`,\n      });\n      \n      onComplete();\n    } catch (error: any) {\n      console.error('Onboarding error:', error);\n      toast({\n        variant: \"destructive\",\n        title: \"오류 발생\",\n        description: \"사용자 등록 중 오류가 발생했습니다\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4\">\n      <div className=\"max-w-md w-full animate-fade-in\">\n        <Card className=\"bg-card shadow-2xl game-glow\">\n          <CardContent className=\"p-8 text-center space-y-6\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center mx-auto\">\n              <i className=\"fas fa-user-plus text-2xl text-primary-foreground\"></i>\n            </div>\n            \n            <div>\n              <h1 className=\"text-3xl font-bold text-card-foreground mb-2\">게임에 오신 것을 환영합니다!</h1>\n              <p className=\"text-muted-foreground\">플레이하기 전에 닉네임을 설정해주세요</p>\n            </div>\n            \n            <div className=\"space-y-4\">\n              <Input\n                type=\"text\"\n                placeholder=\"닉네임을 입력하세요\"\n                value={nickname}\n                onChange={(e) => setNickname(e.target.value)}\n                maxLength={20}\n                className=\"h-14 text-center text-lg font-medium\"\n                onKeyDown={(e) => {\n                  if (e.key === 'Enter' && !e.nativeEvent.isComposing) {\n                    handleSubmit();\n                  }\n                }}\n                data-testid=\"input-nickname\"\n                autoFocus\n              />\n              \n              <Button\n                size=\"lg\"\n                className=\"w-full h-14 text-lg\"\n                onClick={handleSubmit}\n                disabled={isLoading || nickname.trim().length < 2}\n                data-testid=\"button-start-game\"\n              >\n                {isLoading ? (\n                  <>\n                    <i className=\"fas fa-spinner animate-spin mr-2\"></i>\n                    설정 중...\n                  </>\n                ) : (\n                  \"시작하기\"\n                )}\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3592},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/replitAuth.ts":{"content":"import { OAuth2Client } from 'google-auth-library';\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nconst hasGoogleAuth = process.env.GOOGLE_CLIENT_ID && process.env.GOOGLE_CLIENT_SECRET;\n\nconst client = hasGoogleAuth ? new OAuth2Client(\n  process.env.GOOGLE_CLIENT_ID!,\n  process.env.GOOGLE_CLIENT_SECRET!,\n  process.env.GOOGLE_REDIRECT_URI || \"http://localhost:5000/auth/google/callback\"\n) : null;\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nasync function upsertUser(profile: any) {\n  const nickname = profile.given_name || profile.email?.split(\"@\")[0] || `User${profile.sub.slice(-4)}`;\n\n  await storage.upsertUser({\n    id: profile.sub,\n    email: profile.email,\n    firstName: profile.given_name,\n    lastName: profile.family_name,\n    profileImageUrl: profile.picture,\n    nickname,\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n\n  // Google OAuth login route\n  app.get(\"/api/login\", (req, res) => {\n    if (!hasGoogleAuth || !client) {\n      return res.status(501).json({ message: \"Google authentication not configured\" });\n    }\n    const authUrl = client.generateAuthUrl({\n      access_type: 'offline',\n      scope: [\n        'https://www.googleapis.com/auth/userinfo.profile',\n        'https://www.googleapis.com/auth/userinfo.email'\n      ],\n      include_granted_scopes: true,\n    });\n    res.redirect(authUrl);\n  });\n\n  // Google OAuth callback route\n  app.get(\"/auth/google/callback\", async (req, res) => {\n    if (!hasGoogleAuth || !client) {\n      return res.redirect(\"/\");\n    }\n    try {\n      const { code } = req.query;\n      if (!code) {\n        return res.redirect(\"/api/login\");\n      }\n\n      const { tokens } = await client.getToken(code as string);\n      client.setCredentials(tokens);\n\n      const ticket = await client.verifyIdToken({\n        idToken: tokens.id_token!,\n        audience: process.env.GOOGLE_CLIENT_ID!,\n      });\n\n      const payload = ticket.getPayload();\n      if (!payload) {\n        return res.redirect(\"/api/login\");\n      }\n\n      // Store user session\n      req.session.user = {\n        id: payload.sub!,\n        email: payload.email || undefined,\n        firstName: payload.given_name || undefined,\n        lastName: payload.family_name || undefined,\n        profileImageUrl: payload.picture || undefined,\n        accessToken: tokens.access_token || undefined,\n        refreshToken: tokens.refresh_token || undefined,\n      };\n\n      await upsertUser(payload);\n      res.redirect(\"/\");\n    } catch (error) {\n      console.error(\"Google OAuth callback error:\", error);\n      res.redirect(\"/api/login\");\n    }\n  });\n\n  // Logout route\n  app.get(\"/api/logout\", (req, res) => {\n    req.session.destroy((err) => {\n      if (err) {\n        console.error(\"Session destroy error:\", err);\n      }\n      res.redirect(\"/\");\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.session.user;\n\n  if (!user) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  // Add user to request object for compatibility\n  req.user = {\n    claims: () => ({\n      sub: user.id,\n      email: user.email,\n      first_name: user.firstName,\n      last_name: user.lastName,\n      profile_image_url: user.profileImageUrl,\n    })\n  };\n\n  next();\n};","size_bytes":3981},"server/types.ts":{"content":"\ndeclare module 'express-session' {\n  interface SessionData {\n    user?: {\n      id: string;\n      email: string;\n      firstName: string;\n      lastName: string;\n      profileImageUrl: string;\n      accessToken: string;\n      refreshToken?: string;\n    };\n  }\n}\n\nexport {};\n","size_bytes":275},"client/src/components/AuthNavigation.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\nexport default function AuthNavigation() {\n  const { user, isAuthenticated } = useAuth();\n\n  if (!isAuthenticated) return null;\n\n  return (\n    <div className=\"flex items-center space-x-4\">\n      <div className=\"hidden md:flex items-center space-x-2 text-sm text-muted-foreground\">\n        <img \n          src={user?.profileImageUrl || '/api/placeholder/32/32'} \n          alt=\"프로필\" \n          className=\"w-6 h-6 rounded-full object-cover\"\n        />\n        <span>{user?.nickname || user?.firstName || '플레이어'}</span>\n      </div>\n      <div className=\"flex items-center space-x-2\">\n        <Link href=\"/leaderboard\">\n          <Button variant=\"ghost\" size=\"sm\">\n            <i className=\"fas fa-trophy mr-1\"></i>\n            리더보드\n          </Button>\n        </Link>\n        <Link href=\"/settings\">\n          <Button variant=\"ghost\" size=\"sm\">\n            <i className=\"fas fa-cog mr-1\"></i>\n            설정\n          </Button>\n        </Link>\n        <Button \n          variant=\"outline\" \n          size=\"sm\"\n          onClick={async () => {\n            try {\n              const response = await fetch(\"/api/auth/logout\", {\n                method: \"POST\",\n                credentials: \"include\"\n              });\n              if (response.ok) {\n                window.location.href = \"/\";\n              }\n            } catch (error) {\n              console.error(\"Logout error:\", error);\n              window.location.href = \"/\";\n            }\n          }}\n        >\n          <i className=\"fas fa-sign-out-alt mr-1\"></i>\n          로그아웃\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":1745},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport type { User } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading } = useQuery<User>({\n    queryKey: [\"/api/auth/user\"],\n    retry: false,\n  });\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n  };\n}","size_bytes":306},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/pages/GameHistory.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\n\ninterface GameHistoryEntry {\n  id: string;\n  opponent: string;\n  isBot: boolean;\n  result: \"win\" | \"loss\" | \"tie\";\n  myBestScore: number;\n  opponentBestScore: number;\n  completedAt: string;\n  rounds: any[];\n}\n\nexport default function GameHistory() {\n  // Mock data - in production this would come from the database\n  const gameHistory: GameHistoryEntry[] = [\n    {\n      id: \"game-1\",\n      opponent: \"AI 봇\",\n      isBot: true,\n      result: \"win\",\n      myBestScore: 87,\n      opponentBestScore: 73,\n      completedAt: \"2025-01-03T10:30:00Z\",\n      rounds: []\n    },\n    {\n      id: \"game-2\", \n      opponent: \"워드마스터\",\n      isBot: false,\n      result: \"loss\",\n      myBestScore: 62,\n      opponentBestScore: 89,\n      completedAt: \"2025-01-03T09:15:00Z\",\n      rounds: []\n    },\n    {\n      id: \"game-3\",\n      opponent: \"AI 봇\",\n      isBot: true,\n      result: \"tie\",\n      myBestScore: 75,\n      opponentBestScore: 75,\n      completedAt: \"2025-01-02T16:45:00Z\",\n      rounds: []\n    }\n  ];\n\n  const getResultBadge = (result: string) => {\n    switch(result) {\n      case \"win\":\n        return <Badge className=\"bg-green-500 text-white\">승리</Badge>;\n      case \"loss\":\n        return <Badge variant=\"destructive\">패배</Badge>;\n      case \"tie\":\n        return <Badge variant=\"secondary\">무승부</Badge>;\n      default:\n        return <Badge variant=\"outline\">진행중</Badge>;\n    }\n  };\n\n  const getResultIcon = (result: string) => {\n    switch(result) {\n      case \"win\": return \"fas fa-trophy text-green-500\";\n      case \"loss\": return \"fas fa-times-circle text-red-500\";\n      case \"tie\": return \"fas fa-handshake text-muted-foreground\";\n      default: return \"fas fa-clock text-muted-foreground\";\n    }\n  };\n\n  return (\n    <main className=\"mx-auto max-w-4xl px-4 py-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-4 mb-8\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" size=\"sm\">\n            <i className=\"fas fa-arrow-left mr-2\"></i>\n            홈으로\n          </Button>\n        </Link>\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">게임 기록</h1>\n          <p className=\"text-muted-foreground\">지난 대전 결과를 확인하세요</p>\n        </div>\n      </div>\n\n      {/* Summary Stats */}\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-foreground\">{gameHistory.length}</div>\n            <div className=\"text-sm text-muted-foreground\">총 게임</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-green-500\">\n              {gameHistory.filter(g => g.result === \"win\").length}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">승리</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-red-500\">\n              {gameHistory.filter(g => g.result === \"loss\").length}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">패배</div>\n          </CardContent>\n        </Card>\n        <Card>\n          <CardContent className=\"p-4 text-center\">\n            <div className=\"text-2xl font-bold text-primary\">\n              {Math.max(...gameHistory.map(g => g.myBestScore))}\n            </div>\n            <div className=\"text-sm text-muted-foreground\">최고 점수</div>\n          </CardContent>\n        </Card>\n      </div>\n\n      {/* Game History List */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <i className=\"fas fa-history text-primary\"></i>\n            <span>최근 대전</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {gameHistory.map((game) => (\n              <div \n                key={game.id}\n                className=\"flex items-center p-4 rounded-lg border bg-card hover:bg-card/80 transition-colors\"\n                data-testid={`game-history-${game.id}`}\n              >\n                {/* Result Icon */}\n                <div className=\"w-12 h-12 flex items-center justify-center mr-4\">\n                  <i className={`${getResultIcon(game.result)} text-xl`}></i>\n                </div>\n                \n                {/* Game Info */}\n                <div className=\"flex-1\">\n                  <div className=\"flex items-center space-x-3 mb-1\">\n                    <span className=\"font-semibold text-foreground\">\n                      vs {game.opponent}\n                    </span>\n                    {game.isBot && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        <i className=\"fas fa-robot mr-1\"></i>\n                        봇\n                      </Badge>\n                    )}\n                    {getResultBadge(game.result)}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {new Date(game.completedAt).toLocaleString('ko-KR')}\n                  </div>\n                </div>\n                \n                {/* Scores */}\n                <div className=\"text-right mr-4\">\n                  <div className=\"flex items-center space-x-2\">\n                    <span className=\"text-lg font-semibold text-foreground\">\n                      {game.myBestScore}\n                    </span>\n                    <span className=\"text-muted-foreground\">vs</span>\n                    <span className=\"text-lg font-semibold text-muted-foreground\">\n                      {game.opponentBestScore}\n                    </span>\n                  </div>\n                  <div className=\"text-xs text-muted-foreground\">최고 점수</div>\n                </div>\n                \n                {/* View Details */}\n                <Button variant=\"outline\" size=\"sm\" data-testid={`button-view-${game.id}`}>\n                  <i className=\"fas fa-eye mr-1\"></i>\n                  상세\n                </Button>\n              </div>\n            ))}\n            \n            {gameHistory.length === 0 && (\n              <div className=\"text-center py-12\">\n                <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                  <i className=\"fas fa-gamepad text-muted-foreground text-xl\"></i>\n                </div>\n                <h3 className=\"text-lg font-semibold text-card-foreground mb-2\">\n                  아직 게임 기록이 없습니다\n                </h3>\n                <p className=\"text-muted-foreground mb-4\">\n                  첫 게임을 시작해보세요!\n                </p>\n                <Link href=\"/\">\n                  <Button>\n                    <i className=\"fas fa-play mr-2\"></i>\n                    게임 시작\n                  </Button>\n                </Link>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </main>\n  );\n}","size_bytes":7385},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nexport default function Landing() {\n  return (\n    <main className=\"mx-auto max-w-4xl px-4 py-8 space-y-8\">\n      {/* Hero Section */}\n      <div className=\"text-center space-y-6 mb-12 animate-fade-in\">\n        <div className=\"relative\">\n          <h1 className=\"text-5xl md:text-7xl font-bold mb-4 bg-gradient-to-r from-primary via-accent to-primary bg-clip-text text-transparent\">\n            한국어 텍스트 배틀\n          </h1>\n          <div className=\"absolute inset-0 bg-gradient-to-r from-primary/20 via-accent/20 to-primary/20 blur-3xl -z-10\"></div>\n        </div>\n        <p className=\"text-xl text-muted-foreground max-w-2xl mx-auto leading-relaxed\">\n          단어의 의미 유사도로 승부하는 실시간 대전 게임<br />\n          <span className=\"text-accent font-medium\">로그인하고 다른 플레이어와 경쟁하세요!</span>\n        </p>\n      </div>\n\n      {/* Login Card */}\n      <Card className=\"bg-card shadow-lg max-w-md mx-auto\">\n        <CardContent className=\"p-8 text-center space-y-6\">\n          <div className=\"flex justify-center\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center\">\n              <i className=\"fas fa-user text-2xl text-primary-foreground\"></i>\n            </div>\n          </div>\n          \n          <div>\n            <h2 className=\"text-2xl font-bold text-card-foreground mb-2\">게임 시작하기</h2>\n            <p className=\"text-muted-foreground\">로그인하여 다른 플레이어와 대전하세요</p>\n          </div>\n          \n          <Button\n            size=\"lg\"\n            className=\"w-full h-14 rounded-full font-semibold\"\n            onClick={async () => {\n              try {\n                const nickname = prompt(\"닉네임을 입력하세요 (개발용 모드):\");\n                if (!nickname) return;\n\n                const response = await fetch(\"/api/auth/mock-login\", {\n                  method: \"POST\",\n                  headers: {\n                    \"Content-Type\": \"application/json\",\n                  },\n                  body: JSON.stringify({ nickname }),\n                  credentials: \"include\"\n                });\n\n                const data = await response.json();\n                if (response.ok) {\n                  console.log(\"Mock login success\", data);\n                  window.location.reload();\n                } else {\n                  alert(`로그인 실패: ${data.message}`);\n                }\n              } catch (error) {\n                console.error(\"Login error:\", error);\n                alert(\"로그인 중 오류가 발생했습니다\");\n              }\n            }}\n            data-testid=\"button-login\"\n          >\n            <i className=\"fas fa-sign-in-alt mr-2\"></i>\n            로그인하기 (개발용)\n          </Button>\n          \n          <p className=\"text-xs text-muted-foreground\">\n            개발 모드: 닉네임만 입력하면 로그인됩니다\n          </p>\n        </CardContent>\n      </Card>\n\n      {/* Game Info */}\n      <div className=\"grid md:grid-cols-3 gap-6 mt-12\">\n        <Card className=\"bg-card shadow-md\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-primary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-brain text-primary text-xl\"></i>\n            </div>\n            <h3 className=\"text-lg font-semibold text-card-foreground mb-2\">의미 유사도 대전</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              FastText 한국어 임베딩으로 단어의 의미 유사도를 계산하여 승부\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"bg-card shadow-md\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-accent/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-stopwatch text-accent text-xl\"></i>\n            </div>\n            <h3 className=\"text-lg font-semibold text-card-foreground mb-2\">실시간 5라운드</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              라운드당 15초의 제한 시간 내에 최고 점수를 노리세요\n            </p>\n          </CardContent>\n        </Card>\n        \n        <Card className=\"bg-card shadow-md\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"w-12 h-12 bg-secondary/10 rounded-lg flex items-center justify-center mx-auto mb-4\">\n              <i className=\"fas fa-robot text-secondary text-xl\"></i>\n            </div>\n            <h3 className=\"text-lg font-semibold text-card-foreground mb-2\">AI 봇 연습</h3>\n            <p className=\"text-sm text-muted-foreground\">\n              다양한 난이도의 AI 봇과 연습하며 실력을 향상시키세요\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </main>\n  );\n}","size_bytes":5100},"client/src/pages/Leaderboard.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\n\nexport default function Leaderboard() {\n  // Mock data - in production this would come from the database\n  const leaderboardData = [\n    { rank: 1, nickname: \"워드마스터\", totalWins: 45, bestScore: 98, winRate: 87 },\n    { rank: 2, nickname: \"의미왕\", totalWins: 38, bestScore: 95, winRate: 82 },\n    { rank: 3, nickname: \"한글고수\", totalWins: 32, bestScore: 92, winRate: 78 },\n    { rank: 4, nickname: \"단어장인\", totalWins: 28, bestScore: 89, winRate: 74 },\n    { rank: 5, nickname: \"유사도킹\", totalWins: 25, bestScore: 87, winRate: 71 },\n  ];\n\n  const getRankIcon = (rank: number) => {\n    switch(rank) {\n      case 1: return \"fas fa-crown text-yellow-400\";\n      case 2: return \"fas fa-medal text-gray-400\";\n      case 3: return \"fas fa-award text-amber-600\";\n      default: return \"fas fa-hashtag text-muted-foreground\";\n    }\n  };\n\n  const getRankColor = (rank: number) => {\n    switch(rank) {\n      case 1: return \"bg-gradient-to-r from-yellow-400/20 to-yellow-500/20 border-yellow-400\";\n      case 2: return \"bg-gradient-to-r from-gray-400/20 to-gray-500/20 border-gray-400\";\n      case 3: return \"bg-gradient-to-r from-amber-600/20 to-amber-700/20 border-amber-600\";\n      default: return \"bg-card border-border\";\n    }\n  };\n\n  return (\n    <main className=\"mx-auto max-w-4xl px-4 py-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-4 mb-8\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" size=\"sm\">\n            <i className=\"fas fa-arrow-left mr-2\"></i>\n            홈으로\n          </Button>\n        </Link>\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">리더보드</h1>\n          <p className=\"text-muted-foreground\">최고의 플레이어들을 만나보세요</p>\n        </div>\n      </div>\n\n      {/* Leaderboard Card */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <i className=\"fas fa-trophy text-primary\"></i>\n            <span>전체 순위</span>\n            <Badge variant=\"secondary\" className=\"ml-auto\">\n              <i className=\"fas fa-clock mr-1\"></i>\n              실시간\n            </Badge>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {leaderboardData.map((player) => (\n              <div \n                key={player.rank}\n                className={`flex items-center p-4 rounded-lg border transition-all hover:shadow-md ${getRankColor(player.rank)}`}\n                data-testid={`row-rank-${player.rank}`}\n              >\n                {/* Rank and Icon */}\n                <div className=\"flex items-center space-x-3 w-16\">\n                  <i className={`${getRankIcon(player.rank)} text-lg`}></i>\n                  <span className=\"font-bold text-lg\">{player.rank}</span>\n                </div>\n                \n                {/* Player Info */}\n                <div className=\"flex-1 ml-4\">\n                  <h3 className=\"font-semibold text-foreground text-lg\">{player.nickname}</h3>\n                  <div className=\"flex items-center space-x-4 text-sm text-muted-foreground\">\n                    <span>\n                      <i className=\"fas fa-gamepad mr-1\"></i>\n                      {player.totalWins}승\n                    </span>\n                    <span>\n                      <i className=\"fas fa-percentage mr-1\"></i>\n                      승률 {player.winRate}%\n                    </span>\n                  </div>\n                </div>\n                \n                {/* Best Score */}\n                <div className=\"text-right\">\n                  <div className=\"text-2xl font-bold text-primary\">{player.bestScore}</div>\n                  <div className=\"text-xs text-muted-foreground\">최고 점수</div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Season Info */}\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"text-center space-y-4\">\n            <div className=\"w-16 h-16 bg-gradient-to-br from-primary to-accent rounded-full flex items-center justify-center mx-auto\">\n              <i className=\"fas fa-calendar-alt text-2xl text-primary-foreground\"></i>\n            </div>\n            <div>\n              <h3 className=\"text-lg font-semibold text-card-foreground\">시즌 1</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                2025년 1월 시즌이 진행 중입니다\n              </p>\n            </div>\n            <div className=\"flex justify-center space-x-8 text-sm\">\n              <div className=\"text-center\">\n                <div className=\"font-semibold text-foreground\">23일</div>\n                <div className=\"text-muted-foreground\">시즌 종료까지</div>\n              </div>\n              <div className=\"text-center\">\n                <div className=\"font-semibold text-foreground\">1,247</div>\n                <div className=\"text-muted-foreground\">참여 플레이어</div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </main>\n  );\n}","size_bytes":5369},"client/src/pages/Settings.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Link } from \"wouter\";\n\nexport default function Settings() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const [nickname, setNickname] = useState(\"\");\n  const [soundEnabled, setSoundEnabled] = useState(true);\n  const [notifications, setNotifications] = useState(true);\n\n  useEffect(() => {\n    if (user) {\n      setNickname(user.nickname || \"\");\n    }\n    // Load settings from localStorage\n    setSoundEnabled(localStorage.getItem('soundEnabled') !== 'false');\n    setNotifications(localStorage.getItem('notifications') !== 'false');\n  }, [user]);\n\n  const handleSaveSettings = () => {\n    localStorage.setItem('soundEnabled', soundEnabled.toString());\n    localStorage.setItem('notifications', notifications.toString());\n    \n    toast({\n      title: \"설정 저장됨\",\n      description: \"변경사항이 저장되었습니다.\",\n    });\n  };\n\n  const handleClearData = () => {\n    if (confirm(\"모든 로컬 데이터를 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.\")) {\n      localStorage.clear();\n      toast({\n        title: \"데이터 삭제됨\",\n        description: \"모든 로컬 데이터가 삭제되었습니다.\",\n      });\n      window.location.reload();\n    }\n  };\n\n  return (\n    <main className=\"mx-auto max-w-2xl px-4 py-8 space-y-6\">\n      {/* Header */}\n      <div className=\"flex items-center space-x-4 mb-8\">\n        <Link href=\"/\">\n          <Button variant=\"ghost\" size=\"sm\">\n            <i className=\"fas fa-arrow-left mr-2\"></i>\n            홈으로\n          </Button>\n        </Link>\n        <div>\n          <h1 className=\"text-3xl font-bold text-foreground\">설정</h1>\n          <p className=\"text-muted-foreground\">게임 설정 및 계정 정보</p>\n        </div>\n      </div>\n\n      {/* User Profile */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <i className=\"fas fa-user text-primary\"></i>\n            <span>프로필 정보</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center space-x-4\">\n            <img \n              src={user?.profileImageUrl || '/api/placeholder/64/64'} \n              alt=\"프로필 사진\"\n              className=\"w-16 h-16 rounded-full object-cover border-2 border-border\"\n            />\n            <div className=\"space-y-2\">\n              <div>\n                <Label htmlFor=\"nickname\">닉네임</Label>\n                <Input\n                  id=\"nickname\"\n                  value={nickname}\n                  onChange={(e) => setNickname(e.target.value)}\n                  className=\"w-full\"\n                  placeholder=\"닉네임을 입력하세요\"\n                  data-testid=\"input-nickname\"\n                />\n              </div>\n              <p className=\"text-xs text-muted-foreground\">\n                {user?.email && `이메일: ${user.email}`}\n              </p>\n            </div>\n          </div>\n          <Button className=\"w-full\" data-testid=\"button-save-profile\">\n            <i className=\"fas fa-save mr-2\"></i>\n            프로필 저장\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Game Settings */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <i className=\"fas fa-gamepad text-primary\"></i>\n            <span>게임 설정</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label className=\"text-sm font-medium\">효과음</Label>\n              <p className=\"text-xs text-muted-foreground\">게임 중 소리 효과 재생</p>\n            </div>\n            <Switch \n              checked={soundEnabled}\n              onCheckedChange={setSoundEnabled}\n              data-testid=\"switch-sound\"\n            />\n          </div>\n          \n          <div className=\"flex items-center justify-between\">\n            <div className=\"space-y-1\">\n              <Label className=\"text-sm font-medium\">알림</Label>\n              <p className=\"text-xs text-muted-foreground\">게임 결과 및 매칭 알림</p>\n            </div>\n            <Switch \n              checked={notifications}\n              onCheckedChange={setNotifications}\n              data-testid=\"switch-notifications\"\n            />\n          </div>\n\n          <Button \n            onClick={handleSaveSettings}\n            className=\"w-full\"\n            data-testid=\"button-save-settings\"\n          >\n            <i className=\"fas fa-save mr-2\"></i>\n            설정 저장\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Game Statistics */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2\">\n            <i className=\"fas fa-chart-bar text-primary\"></i>\n            <span>게임 통계</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-2 gap-4 text-center\">\n            <div className=\"space-y-2\">\n              <div className=\"text-2xl font-bold text-primary\">0</div>\n              <div className=\"text-sm text-muted-foreground\">총 게임 수</div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"text-2xl font-bold text-accent\">0</div>\n              <div className=\"text-sm text-muted-foreground\">승리 횟수</div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"text-2xl font-bold text-secondary\">0</div>\n              <div className=\"text-sm text-muted-foreground\">최고 점수</div>\n            </div>\n            <div className=\"space-y-2\">\n              <div className=\"text-2xl font-bold text-muted-foreground\">0%</div>\n              <div className=\"text-sm text-muted-foreground\">승률</div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Danger Zone */}\n      <Card className=\"border-destructive\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center space-x-2 text-destructive\">\n            <i className=\"fas fa-exclamation-triangle\"></i>\n            <span>위험 구역</span>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            <div>\n              <h4 className=\"font-medium text-card-foreground mb-2\">로컬 데이터 삭제</h4>\n              <p className=\"text-sm text-muted-foreground mb-4\">\n                저장된 모든 로컬 설정과 임시 데이터를 삭제합니다. 계정 정보는 유지됩니다.\n              </p>\n              <Button \n                variant=\"destructive\"\n                onClick={handleClearData}\n                data-testid=\"button-clear-data\"\n              >\n                <i className=\"fas fa-trash mr-2\"></i>\n                로컬 데이터 삭제\n              </Button>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </main>\n  );\n}","size_bytes":7485}},"version":1}