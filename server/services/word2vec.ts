// Korean word similarity service based on Semantle-ko's approach
// Uses proper cosine similarity calculation like semantle-ko's word2vec.py

import fs from 'fs';
import path from 'path';
import { FastTextLoader, fastTextLoader } from './fastTextLoader';
import { directFastText } from './directFastText';
import { koreanDictionary } from './koreanDictionary';

interface WordVector {
  word: string;
  vector: number[];
}

interface SimilarityResult {
  similarity: number;
  rank?: string;
}

class Word2VecService {
  private wordVectors: Map<string, number[]> = new Map();
  private isLoaded = false;
  private frequentWords: string[] = [];
  private similarityMatrix: Map<string, number> = new Map();
  private useFastText = false;

  constructor() {
    this.init();
  }

  async init() {
    if (!this.isLoaded) {
      await this.loadKoreanWords();
      await this.loadSimilarityMatrix();
      await this.tryLoadFastText();
      this.loadSampleVectors();
    }
  }

  // Try to load FastText vectors if available
  private async tryLoadFastText(): Promise<void> {
    try {
      // TARGET_WORDS from StaticGame.tsx - Í≤åÏûÑÏóêÏÑú ÏÇ¨Ïö©ÎêòÎäî Î™®Îì† Î™©Ìëú Îã®Ïñ¥
      const TARGET_WORDS = [
        "Í∞ÄÏ°±", "Ïñ¥Î®∏Îãà", "ÏïÑÎ≤ÑÏßÄ", "Î∂ÄÎ™®", "ÌòïÏ†ú", "ÏûêÎß§", "ÏπúÍµ¨", "ÏÇ¨Îûë", "ÌñâÎ≥µ", "Í∏∞ÏÅ®",
        "ÏûêÏó∞", "ÎÇòÎ¨¥", "ÍΩÉ", "ÏÇ∞", "Î∞îÎã§", "Í∞ï", "ÌïòÎäò", "Î≥Ñ", "Îã¨", "ÌÉúÏñë",
        "ÏùåÏãù", "Ïßë", "ÌïôÍµê", "ÌöåÏÇ¨", "ÏãúÍ∞Ñ", "Ïò§Îäò", "ÎÇ¥Ïùº", "ÏïÑÏπ®", "Ï†ÄÎÖÅ", "Î∞§",
        "ÏÉùÍ∞Å", "Î¨∏Ï†ú", "Î∞©Î≤ï", "Ïù¥Ïú†", "Í≤∞Í≥º", "Î≥ÄÌôî", "ÏÑ±Ïû•", "Í≤ΩÌóò", "Í∏∞Ìöå", "Ìù¨Îßù",
        "ÏÇ¨Ìöå", "Î¨∏Ìôî", "ÍµêÏú°", "Ï†ïÏπò", "Í∏∞Ïà†", "Í≥ºÌïô", "ÏòàÏà†", "Ïö¥Îèô", "Ïó¨Ìñâ", "ÏùåÏïÖ"
      ];
      
      // Î¥á Îã®Ïñ¥Îì§ - Í≤åÏûÑÏóêÏÑú Î¥áÏù¥ ÏÇ¨Ïö©ÌïòÎäî Îã®Ïñ¥Îì§
      const BOT_WORDS = [
        "Ïö∞Ï£º", "ÏÑ∏ÏÉÅ", "ÎßàÏùå", "Ïù∏ÏÉù", "ÏÑ∏Í≥Ñ", "ÏÇ¨Îûå", "ÎÇòÎùº", "ÏßÄÍµ¨", "ÎØ∏Îûò", "Í≥ºÍ±∞",
        "ÌòÑÏã§", "Íøà", "ÏÜåÎßù", "Î™©Ìëú", "Í≥ÑÌöç", "Ï§ÄÎπÑ", "ÏãúÏûë", "ÏôÑÏÑ±", "ÏÑ±Ï∑®", "Î∞úÏ†Ñ",
        "Ï∞ΩÏ°∞", "Î∞úÍ≤¨", "ÌÉêÍµ¨", "Ïó∞Íµ¨", "ÌïôÏäµ", "ÏßÄÏãù", "ÏßÄÌòú", "Ïù¥Ìï¥", "Íπ®Îã¨Ïùå", "ÏÑ±Ï∞∞"
      ];

      const fastTextPath = path.join(process.cwd(), 'data', 'fasttext', 'cc.ko.300.vec');
      
      // ÌïµÏã¨: Î™®Îì† Í≤åÏûÑ Í¥ÄÎ†® Îã®Ïñ¥Îì§ÏùÑ ÎØ∏Î¶¨ Î°úÎìú
      const allGameWords = [...TARGET_WORDS, ...BOT_WORDS];
      
      console.log(`üéØ Loading ${allGameWords.length} game words from FastText...`);
      await directFastText.loadVectors(fastTextPath, allGameWords);
      
      console.log(`üöÄ DirectFastText enabled with key words`);
      this.useFastText = true;
    } catch (error) {
      console.log('‚ÑπÔ∏è DirectFastText not available, trying original FastText...', error);
      
      // Fallback to original FastText loader
      try {
        const fastTextVectors = await fastTextLoader.loadVectors(10000);
        
        if (fastTextVectors.size > 0) {
          console.log(`üöÄ FastText enabled with ${fastTextVectors.size} Korean words`);
          this.wordVectors = fastTextVectors;
          this.useFastText = true;
          
          // Precompute similarities for frequent words if we have FastText
          if (this.frequentWords.length > 0) {
            const topWords = this.frequentWords.slice(0, 200);
            const precomputedSims = await FastTextLoader.precomputeSimilarities(
              topWords,
              fastTextVectors
            );
            
            // Merge with existing similarity matrix
            precomputedSims.forEach((similarity, key) => {
              this.similarityMatrix.set(key, similarity);
            });
            
            console.log(`üìä Enhanced similarity matrix: ${this.similarityMatrix.size / 2} word pairs`);
          }
        }
      } catch (fallbackError) {
        console.log('‚ÑπÔ∏è FastText not available, using fallback similarity calculations');
        this.useFastText = false;
      }
    }
  }

  // Load pre-calculated similarity matrix
  private async loadSimilarityMatrix(): Promise<void> {
    try {
      const matrixFilePath = path.join(process.cwd(), 'data', 'korean_word_similarities.csv');
      const content = fs.readFileSync(matrixFilePath, 'utf-8');
      
      content.split('\n')
        .filter(line => line.trim() && !line.startsWith('#'))
        .forEach(line => {
          const [word1, word2, score] = line.split(',');
          if (word1 && word2 && score) {
            const key1 = `${word1.trim()}-${word2.trim()}`;
            const key2 = `${word2.trim()}-${word1.trim()}`;
            const similarity = parseFloat(score.trim());
            this.similarityMatrix.set(key1, similarity);
            this.similarityMatrix.set(key2, similarity);
          }
        });
      
      console.log(`‚úÖ Loaded ${this.similarityMatrix.size / 2} word similarity pairs`);
    } catch (error) {
      console.warn('‚ö†Ô∏è Could not load similarity matrix, using fallback calculations');
    }
  }

  // Load Korean frequent words from dictionary instead of manual file
  private async loadKoreanWords(): Promise<void> {
    try {
      // Try to load from Korean dictionary first
      await koreanDictionary.init();
      const dictStats = koreanDictionary.getDictionaryStats();
      
      if (dictStats.isLoaded && dictStats.totalWords > 0) {
        // Extract common Korean words from dictionary
        // Filter for typical Korean words (2-4 characters, common patterns)
        const allDictWords = koreanDictionary.getAllWords();
        this.frequentWords = allDictWords
          .filter((word: string) => {
            // Filter for reasonable Korean words
            return word.length >= 2 && 
                   word.length <= 4 && 
                   /^[Í∞Ä-Ìû£]+$/.test(word) && // Only Hangul
                   !word.includes('„Öá') && // Avoid partial characters
                   !word.includes('„Ñ±'); // Avoid partial characters
          })
          .slice(0, 1000); // Take top 1000
        
        console.log(`‚úÖ Extracted ${this.frequentWords.length} frequent words from Korean dictionary`);
        return;
      }
    } catch (error) {
      console.warn('‚ö†Ô∏è Could not use Korean dictionary, trying file fallback');
    }

    // Fallback to existing file method
    try {
      const wordsFilePath = path.join(process.cwd(), 'data', 'korean_frequent_words.txt');
      const content = fs.readFileSync(wordsFilePath, 'utf-8');
      
      // Parse words from file (filter out comments and empty lines)
      this.frequentWords = content
        .split('\n')
        .map(line => line.trim())
        .filter(line => line.length > 0 && !line.startsWith('#'))
        .slice(0, 1000); // Use top 1000 words
      
      console.log(`‚úÖ Loaded ${this.frequentWords.length} Korean frequent words from file`);
    } catch (error) {
      console.warn('‚ö†Ô∏è Could not load korean_frequent_words.txt, using fallback word list');
      // Fallback to embedded word list if file not found
      this.loadFallbackWords();
    }
  }

  private loadFallbackWords(): void {
    this.frequentWords = [
      // Core high-frequency words as fallback
      'Í≤É', 'ÌïòÎã§', 'ÏûàÎã§', 'ÎêòÎã§', 'ÎÇò', 'ÏóÜÎã§', 'ÏÇ¨Îûå', 'Ïö∞Î¶¨', 'ÏïÑÎãàÎã§', 'Í∞ôÎã§',
      'ÎåÄÌïòÎã§', 'ÎÖÑ', 'ÎïåÎ¨∏', 'ÎßêÌïòÎã§', 'ÏúÑÌïòÎã§', 'Í∑∏Îü¨ÎÇò', 'ÏïåÎã§', 'Í∑∏Î†áÎã§', 'Îòê', 'ÏÇ¨Ìöå',
      'ÎßéÎã§', 'Ï¢ãÎã§', 'Îçî', 'Î∞õÎã§', 'Í∑∏Í≤É', 'Ïßë', 'ÎÇòÏò§Îã§', 'Í∑∏Î¶¨Í≥†', 'Î¨∏Ï†ú', 'Í∑∏Îü∞',
      'ÏÇ¥Îã§', 'ÏÉùÍ∞ÅÌïòÎã§', 'Î™®Î•¥Îã§', 'ÏÜç', 'ÎßåÎì§Îã§', 'Îç∞', 'Îëê', 'Ïïû', 'Í≤ΩÏö∞', 'Ï§ë',
      // Add more fallback words...
      'Í∞ÄÏ°±', 'Î∂ÄÎ™®', 'ÏïÑÎ≤ÑÏßÄ', 'Ïñ¥Î®∏Îãà', 'ÏïÑÎì§', 'Îî∏', 'Ìòï', 'ÎàÑÎÇò', 'ÎèôÏÉù',
      'ÌïôÍµê', 'ÍµêÏú°', 'Í≥µÎ∂Ä', 'ÏÑ†ÏÉùÎãò', 'ÌïôÏÉù', 'ÏàòÏóÖ', 'ÏãúÌóò', 'ÏàôÏ†ú', 'ÎåÄÌïô',
      'ÏùåÏãù', 'ÏöîÎ¶¨', 'Î∞•', 'ÏãùÎãπ', 'Îßõ', 'Î∞òÏ∞¨', 'Íµ≠Î¨º', 'Í∞ÑÏãù', 'ÎÖπÏ∞®', 'Ïª§Ìîº',
      'ÏÇ¨Îûë', 'ÎßàÏùå', 'Í∞êÏ†ï', 'Í∏∞Î∂Ñ', 'ÏÉùÍ∞Å', 'ÎäêÎÇå', 'ÏùòÍ≤¨', 'ÌåêÎã®', 'ÏßÄÌòú', 'ÌñâÎ≥µ',
      'Ïßë', 'Î∞©', 'Í±¥Î¨º', 'ÏïÑÌååÌä∏', 'ÎßàÏùÑ', 'ÎèÑÏãú', 'ÎÇòÎùº', 'ÏÑ∏Í≥Ñ', 'ÏßÄÍµ¨',
      'ÏãúÍ∞Ñ', 'ÎÇ†Ïßú', 'ÎÖÑÎèÑ', 'Í≥ÑÏ†à', 'Ïò§Îäò', 'ÎÇ¥Ïùº', 'Ïñ¥Ï†ú', 'ÎØ∏Îûò', 'Í≥ºÍ±∞', 'ÌòÑÏû¨'
    ];
  }

  private loadSampleVectors() {
    // Use frequent words from Korean dictionary instead of manual list
    const wordsToUse = this.frequentWords.length > 0 ? this.frequentWords : [
      // Fallback words if file loading failed
      'Í≤É', 'ÌïòÎã§', 'ÏûàÎã§', 'ÎêòÎã§', 'ÎÇò', 'ÏóÜÎã§', 'ÏÇ¨Îûå', 'Ïö∞Î¶¨', 'ÏïÑÎãàÎã§', 'Í∞ôÎã§',
      'Ïßë', 'ÌïôÍµê', 'ÏùåÏãù', 'ÏÇ¨Îûë', 'ÏãúÍ∞Ñ', 'Í∞ÄÏ°±', 'ÏπúÍµ¨', 'Ïùº', 'Îèà', 'ÌñâÎ≥µ'
    ];

    // Generate mock vectors (in production, load from FastText embeddings)
    wordsToUse.forEach((word, index) => {
      const vector = Array(300).fill(0).map(() => Math.random() * 2 - 1);
      this.wordVectors.set(word, vector);
    });

    this.isLoaded = true;
    console.log(`üöÄ Word2Vec service initialized with ${wordsToUse.length} Korean words`);
  }

  // TODO: Production implementation should load from:
  // 1. FastText Korean vectors: cc.ko.300.vec.gz
  // 2. Filtered word list from filter_words.py
  // 3. Pre-calculated similarities from process_similar.py
  async loadProductionVectors(): Promise<void> {
    // Implementation for loading actual FastText embeddings
    // const vectorData = await loadFastTextVectors('data/cc.ko.300.vec');
    // this.wordVectors = new Map(vectorData);
    throw new Error("Production vector loading not implemented yet");
  }

  getWordVector(word: string): number[] | undefined {
    return this.wordVectors.get(word);
  }

  async calculateSimilarity(word1: string, word2: string): Promise<SimilarityResult> {
    console.log(`üí´üí´üí´ WORD2VEC SERVICE ENTRY POINT: "${word1}" vs "${word2}"`);
    
    // Validate words using Korean dictionary first
    if (!koreanDictionary.isValidKoreanWord(word1)) {
      console.warn(`‚ö†Ô∏è Invalid Korean word: ${word1}`);
      // Don't throw error, just warn - let the game continue for now
    }
    if (!koreanDictionary.isValidKoreanWord(word2)) {
      console.warn(`‚ö†Ô∏è Invalid Korean word: ${word2}`);
      // Don't throw error, just warn - let the game continue for now  
    }
    
    // Exact match
    if (word1 === word2) {
      return { similarity: 100, rank: "Ï†ïÎãµ!" };
    }

    // Try DirectFastText with on-demand loading for ANY Korean words
    if (this.useFastText) {
      try {
        const vec1 = await directFastText.getVector(word1);
        const vec2 = await directFastText.getVector(word2);
        
        if (vec1 && vec2) {
          console.log(`üöÄ PATH 1 - On-demand loading: "${word1}" vs "${word2}"`);
          const similarity = directFastText.calculateCosineSimilarity(vec1, vec2);
          
          // üéØ NewsJelly semantle-koÏôÄ Ïú†ÏÇ¨Ìïú Ïä§ÏºÄÏùºÎ°ú Ï°∞Ï†ï
          // ÏõêÎ≥∏ÏóêÏÑúÎäî brother-sonÏù¥ 83.80Ï†êÏù∏Îç∞ Ïö∞Î¶¨Îäî 21Ï†ê ‚Üí ÏïΩ 4Î∞∞ Ï∞®Ïù¥
          // Ïã§ÌóòÏ†ÅÏúºÎ°ú Ïä§ÏºÄÏùº Ìå©ÌÑ∞ Ï†ÅÏö© (Í∞ÄÏ°± Í¥ÄÍ≥Ñ Îã®Ïñ¥Îì§ÏùÑ Í∏∞Ï§ÄÏúºÎ°ú)
          // Scale factor to match NewsJelly scoring (brother-son: 83.80 target)
          const scaleFactor = 2.0; // Temporarily reduced to test if clamping exists
          const rawScore = similarity * 100;
          const adjustedScore = Math.max(0, Math.round(rawScore * scaleFactor));
          
          console.log(`üöÄüöÄüöÄ SCALE FACTOR APPLIED: "${word1}" vs "${word2}" cosine=${similarity.toFixed(6)} ‚Üí raw=${Math.round(rawScore)} ‚Üí SCALED=${adjustedScore}`);
          
          return {
            similarity: adjustedScore,
            rank: this.getRankFromScore(adjustedScore)
          };
        }
      } catch (error) {
        console.error(`Error calculating similarity for ${word1} vs ${word2}:`, error);
      }
    }

    const vec1 = this.getWordVector(word1);
    const vec2 = this.getWordVector(word2);

    // Try DirectFastText first
    if (this.useFastText && directFastText.hasWord(word1) && directFastText.hasWord(word2)) {
      console.log(`üöÄ PATH 2 - Cached vectors: "${word1}" vs "${word2}"`);
      const similarity = directFastText.cosineSimilarity(word1, word2);
      
      // üéØ NewsJelly semantle-koÏôÄ Ïú†ÏÇ¨Ìïú Ïä§ÏºÄÏùºÎ°ú Ï°∞Ï†ï
      // brother-son: ÏõêÎ≥∏ 83.80Ï†ê, Ïö∞Î¶¨ 36Ï†ê ‚Üí 83.80/36 = 2.33Î∞∞ Ï°∞Ï†ï
      const scaleFactor = 2.0; // Temporarily reduced to test if clamping exists
      const rawScore = similarity * 100;
      const adjustedScore = Math.max(0, Math.round(rawScore * scaleFactor));
      
      console.log(`üöÄüöÄüöÄ SCALE FACTOR (cached): "${word1}" vs "${word2}" cosine=${similarity.toFixed(6)} ‚Üí raw=${Math.round(rawScore)} ‚Üí SCALED=${adjustedScore}`);
      
      return {
        similarity: adjustedScore,
        rank: this.getRankFromScore(adjustedScore)
      };
    }

    // Fallback to original FastText
    const fastTextVec1 = this.wordVectors.get(word1);
    const fastTextVec2 = this.wordVectors.get(word2);

    // FastText Î≤°ÌÑ∞Í∞Ä ÏûàÏúºÎ©¥ Ïã§Ï†ú ÏΩîÏÇ¨Ïù∏ Ïú†ÏÇ¨ÎèÑ ÏÇ¨Ïö©
    if (this.useFastText && fastTextVec1 && fastTextVec2) {
      const similarity = FastTextLoader.cosineSimilarity(fastTextVec1, fastTextVec2);
      
      // DEBUG: ÏßÅÏ†ë ÌååÏùºÏóêÏÑú Î≤°ÌÑ∞Î•º Îã§Ïãú Î°úÎìúÌï¥ÏÑú Í≥ÑÏÇ∞
      if ((word1 === 'ÏãúÍ≥Ñ' || word1 === 'ÏÇ¨Í≥º') && word2 === 'ÏãúÍ∞Ñ') {
        console.log(`üîç DEBUG: ${word1} vector preview: [${fastTextVec1.slice(0, 5).join(', ')}...]`);
        console.log(`üîç DEBUG: ${word2} vector preview: [${fastTextVec2.slice(0, 5).join(', ')}...]`);
      }
      
      // semantle-koÏôÄ ÏôÑÏ†ÑÌûà ÎèôÏùºÌïú Î∞©Ïãù: ÏΩîÏÇ¨Ïù∏ Ïú†ÏÇ¨ÎèÑÏóê 100ÏùÑ Í≥±Ìï®
      // ÏΩîÏÇ¨Ïù∏ Ïú†ÏÇ¨ÎèÑÎäî -1 ~ 1 Î≤îÏúÑÏù¥ÎØÄÎ°ú, ÏùåÏàòÎäî 0ÏúºÎ°ú Ï≤òÎ¶¨
      const score = Math.max(0, Math.round(similarity * 100));
      
      console.log(`üéØ SEMANTLE-KO style: "${word1}" vs "${word2}" cosine=${similarity.toFixed(6)} ‚Üí score=${score}`);
      
      return {
        similarity: score,
        rank: this.getRankFromScore(score)
      };
    }

    // Í∞úÎ∞ú Î™®ÎìúÏóêÏÑúÎäî Îã®Ïñ¥Í∞Ä ÏÇ¨Ï†ÑÏóê ÏóÜÏñ¥ÎèÑ ÏûÑÏãú Ï†êÏàò Í≥ÑÏÇ∞
    if (process.env.NODE_ENV === 'development' && (!vec1 || !vec2)) {
      // Îã®Ïñ¥ Ïú†ÏÇ¨ÎèÑÎ•º Í∞ÑÎã®Ìïú Í∑úÏπôÏúºÎ°ú Í≥ÑÏÇ∞
      const similarity = this.calculateSimpleSimilarity(word1, word2);
      let score = Math.round(similarity * 100);
      
      // 0Ï†ê Î∞©ÏßÄ: ÏµúÏÜå 5Ï†êÏùÄ Î≥¥Ïû•
      score = Math.max(5, score);
      
      console.log(`üîç Similarity: "${word1}" vs "${word2}" = ${similarity.toFixed(3)} ‚Üí ${score}Ï†ê`);
      
      return {
        similarity: score,
        rank: score > 90 ? "ÏÉÅÏúÑ 10ÏúÑ" : score > 70 ? "ÏÉÅÏúÑ 100ÏúÑ" : score > 50 ? "ÏÉÅÏúÑ 500ÏúÑ" : "500ÏúÑ Ïù¥ÏÉÅ"
      };
    }

    if (!vec1 || !vec2) {
      throw new Error(`Word not found in vocabulary: ${!vec1 ? word1 : word2}`);
    }

    const similarity = this.cosineSimilarity(vec1, vec2);
    
    // Convert cosine similarity to percentage score (following semantle-ko pattern)
    // Cosine similarity ranges from -1 to 1, but usually 0 to 1 for similar words
    // Convert to 0-100 scale with proper scaling
    const score = Math.max(0, Math.round(similarity * 100));
    
    return {
      similarity: score,
      rank: score > 95 ? "ÏÉÅÏúÑ 10ÏúÑ" : score > 85 ? "ÏÉÅÏúÑ 100ÏúÑ" : score > 70 ? "ÏÉÅÏúÑ 500ÏúÑ" : "500ÏúÑ Ïù¥ÏÉÅ"
    };
  }

  // Í∞úÎ∞úÏö© Í∞ÑÎã®Ìïú Ïú†ÏÇ¨ÎèÑ Í≥ÑÏÇ∞ (Semantle-Ko Ìå®ÌÑ¥ Ï†ÅÏö©)
  private calculateSimpleSimilarity(word1: string, word2: string): number {
    // Exact match
    if (word1 === word2) return 1.0;
    
    // Check pre-calculated similarity matrix first
    const matrixKey = `${word1}-${word2}`;
    const matrixSimilarity = this.similarityMatrix.get(matrixKey);
    if (matrixSimilarity !== undefined) {
      console.log(`üìä Matrix similarity: "${word1}" vs "${word2}" = ${matrixSimilarity.toFixed(3)}`);
      return matrixSimilarity;
    }
    
    // Korean-specific semantic similarity patterns from Semantle-Ko analysis
    const semanticGroups = {
      // Í∞ÄÏ°± Í¥ÄÍ≥Ñ
      family: ['Í∞ÄÏ°±', 'ÏßëÏïà', 'Í∞ÄÏ†ï', 'Î∂ÄÎ™®', 'ÏûêÎÖÄ', 'ÌòïÏ†ú', 'ÏûêÎß§', 'Ï°∞Î∂ÄÎ™®', 'ÏÇ¨Ï¥å', 'ÏπúÏ≤ô', 'ÏïÑÎ≤ÑÏßÄ', 'Ïñ¥Î®∏Îãà', 'ÏïÑÎì§', 'Îî∏', 'Ìòï', 'ÎàÑÎÇò', 'ÎèôÏÉù', 'Ìï†ÏïÑÎ≤ÑÏßÄ', 'Ìï†Î®∏Îãà', 'ÏÇºÏ¥å', 'Ïù¥Î™®', 'Í≥†Î™®', 'ÏπúÍµ¨', 'Ïó∞Ïù∏', 'ÎÇ®Ìé∏', 'ÏïÑÎÇ¥'],
      
      // ÍµêÏú° Í¥ÄÎ†®
      education: ['ÌïôÍµê', 'ÍµêÏú°', 'Í≥µÎ∂Ä', 'ÏÑ†ÏÉùÎãò', 'ÌïôÏÉù', 'ÏàòÏóÖ', 'ÏãúÌóò', 'ÏàôÏ†ú', 'ÎåÄÌïô', 'ÍµêÏã§', 'Ï±Ö', 'ÌïôÏäµ', 'Í≥ºÎ™©', 'ÏàòÌïô', 'Í≥ºÌïô', 'Ïó≠ÏÇ¨', 'Ïñ∏Ïñ¥', 'Î¨∏Ìïô', 'ÏòàÏà†', 'Ï°∏ÏóÖ', 'ÏûÖÌïô', 'ÏÑ±Ï†Å'],
      
      // ÏùåÏãù Í¥ÄÎ†®  
      food: ['ÏùåÏãù', 'ÏöîÎ¶¨', 'Î∞•', 'ÏãùÎãπ', 'Îßõ', 'Î∞òÏ∞¨', 'Íµ≠Î¨º', 'Í∞ÑÏãù', 'ÎÖπÏ∞®', 'Ïª§Ìîº', 'ÏÇ¨Í≥º', 'Î∞îÎÇòÎÇò', 'Îπµ', 'Í≥†Í∏∞', 'ÏïºÏ±Ñ', 'Í≥ºÏùº', 'Î¨º', 'Ïö∞Ïú†', 'Ï∞®', 'Ïà†'],
      
      // Í∞êÏ†ï ÏÉÅÌÉú
      emotion: ['ÏÇ¨Îûë', 'ÎßàÏùå', 'Í∞êÏ†ï', 'Í∏∞Î∂Ñ', 'ÏÉùÍ∞Å', 'ÎäêÎÇå', 'ÏùòÍ≤¨', 'ÌåêÎã®', 'ÏßÄÌòú', 'ÌñâÎ≥µ', 'Ïä¨Ìîî', 'Í∏∞ÏÅ®', 'Ìôî', 'Í±±Ï†ï', 'Î∂àÏïà', 'ÌèâÌôî', 'Ìù¨Îßù', 'Íøà', 'Ï∂îÏñµ', 'Í∑∏Î¶¨ÏõÄ'],
      
      // Í≥µÍ∞Ñ Ïû•ÏÜå
      place: ['Ïßë', 'Î∞©', 'Í±¥Î¨º', 'ÏïÑÌååÌä∏', 'ÎßàÏùÑ', 'ÎèÑÏãú', 'ÎÇòÎùº', 'ÏÑ∏Í≥Ñ', 'ÏßÄÍµ¨', 'ÌïôÍµê', 'ÌöåÏÇ¨', 'Î≥ëÏõê', 'ÏÉÅÏ†ê', 'Í≥µÏõê', 'ÎèÑÏÑúÍ¥Ä', 'Í∑πÏû•', 'ÏãúÏû•', 'Ïó≠', 'Í≥µÌï≠', 'Ìò∏ÌÖî'],
      
      // ÏãúÍ∞Ñ Í∞úÎÖê
      time: ['ÏãúÍ∞Ñ', 'ÎÇ†Ïßú', 'ÎÖÑÎèÑ', 'Í≥ÑÏ†à', 'Ïò§Îäò', 'ÎÇ¥Ïùº', 'Ïñ¥Ï†ú', 'ÎØ∏Îûò', 'Í≥ºÍ±∞', 'ÌòÑÏû¨', 'ÏàúÍ∞Ñ', 'ÏïÑÏπ®', 'Ï†êÏã¨', 'Ï†ÄÎÖÅ', 'Î∞§', 'ÏÉàÎ≤Ω', 'Ï£ºÎßê', 'Ìú¥Ïùº', 'ÏÉùÏùº', 'Í∏∞ÎÖêÏùº'],
      
      // ÏûêÏó∞ ÌôòÍ≤Ω
      nature: ['ÏûêÏó∞', 'ÌôòÍ≤Ω', 'ÎÇòÎ¨¥', 'ÏÇ∞', 'Î∞îÎã§', 'Í∞ï', 'ÌïòÎäò', 'Íµ¨Î¶Ñ', 'ÎπÑ', 'Îàà', 'ÍΩÉ', 'Ïûé', 'Î∞îÎûå', 'ÌñáÎπõ', 'Îã¨', 'Î≥Ñ', 'ÏÉà', 'Î≤åÎ†à', 'ÎèôÎ¨º', 'ÏãùÎ¨º'],
      
      // ÍµêÌÜµ ÏàòÎã®
      transport: ['ÏûêÎèôÏ∞®', 'Î≤ÑÏä§', 'ÏßÄÌïòÏ≤†', 'Í∏∞Ï∞®', 'ÎπÑÌñâÍ∏∞', 'ÏûêÏ†ÑÍ±∞', 'Ïò§ÌÜ†Î∞îÏù¥', 'ÌÉùÏãú', 'Ìä∏Îü≠', 'Î∞∞', 'Í∏∏', 'ÎèÑÎ°ú', 'Îã§Î¶¨', 'ÌÑ∞ÎÑê', 'Ï£ºÏ∞®', 'Ïö¥Ï†Ñ', 'ÍµêÌÜµ', 'Ïó¨Ìñâ'],
      
      // ÏÉâÏÉÅ Í¥ÄÎ†®
      color: ['Îπ®Í∞ÑÏÉâ', 'ÌååÎûÄÏÉâ', 'ÎÖ∏ÎûÄÏÉâ', 'Í≤ÄÏùÄÏÉâ', 'Ìù∞ÏÉâ', 'Ï¥àÎ°ùÏÉâ', 'Î≥¥ÎùºÏÉâ', 'Ï£ºÌô©ÏÉâ', 'Í∞àÏÉâ', 'ÌöåÏÉâ', 'Î∂ÑÌôçÏÉâ', 'Í∏àÏÉâ', 'ÏùÄÏÉâ', 'Ìà¨Î™Ö', 'Î∞ùÎã§', 'Ïñ¥Îë°Îã§', 'ÏÑ†Î™ÖÌïòÎã§', 'ÌùêÎ¶¨Îã§'],
      
      // ÎÇ†Ïî® Í∏∞ÌõÑ
      weather: ['Î¥Ñ', 'Ïó¨Î¶Ñ', 'Í∞ÄÏùÑ', 'Í≤®Ïö∏', 'ÌñáÎπõ', 'Î∞îÎûå', 'Ï≤úÎë•', 'Î≤àÍ∞ú', 'ÏïàÍ∞ú', 'Î¨¥ÏßÄÍ∞ú', 'ÎçîÏúÑ', 'Ï∂îÏúÑ', 'ÏäµÍ∏∞', 'Í±¥Ï°∞', 'ÎßëÎã§', 'ÌùêÎ¶¨Îã§', 'Îî∞ÎúªÌïòÎã§', 'Ï∞®Í∞ëÎã§', 'ÏãúÏõêÌïòÎã§', 'Îç•Îã§'],
      
      // ÎèôÎ¨º Í¥ÄÎ†®
      animal: ['Í≥†ÏñëÏù¥', 'Í∞ïÏïÑÏßÄ', 'ÏÉà', 'Î¨ºÍ≥†Í∏∞', 'ÏÇ¨Ïûê', 'Ìò∏ÎûëÏù¥', 'ÏΩîÎÅºÎ¶¨', 'ÌÜ†ÎÅº', 'Í≥∞', 'Ïó¨Ïö∞', 'Îßê', 'ÏÜå', 'ÎèºÏßÄ', 'Ïñë', 'Îã≠', 'Ïò§Î¶¨', 'Í±∞Î∂ÅÏù¥', 'Î±Ä', 'Í∞úÍµ¨Î¶¨', 'ÎÇòÎπÑ'],
      
      // Ïä§Ìè¨Ï∏† Ïö¥Îèô
      sport: ['Ï∂ïÍµ¨', 'ÏïºÍµ¨', 'ÎÜçÍµ¨', 'ÌÖåÎãàÏä§', 'ÏàòÏòÅ', 'Îã¨Î¶¨Í∏∞', 'Í≥®ÌîÑ', 'Î∞∞ÎìúÎØºÌÑ¥', 'ÌÉÅÍµ¨', 'Î∞∞Íµ¨', 'Í∂åÌà¨', 'ÌÉúÍ∂åÎèÑ', 'Ïä§ÌÇ§', 'Ïä§ÏºÄÏù¥Ìä∏', 'Îì±ÏÇ∞', 'ÎÇöÏãú', 'Í≤ΩÍ∏∞', 'ÏÑ†Ïàò', 'ÌåÄ', 'ÏäπÎ¶¨'],
      
      // ÏßÅÏóÖ Í≤ΩÏ†ú
      work: ['Ïùº', 'ÏßÅÏóÖ', 'ÌöåÏÇ¨', 'ÏÇ¨ÏóÖ', 'Í≤ΩÏ†ú', 'Îèà', 'Í∞ÄÍ≤©', 'ÎπÑÏö©', 'ÏàòÏûÖ', 'ÏõîÍ∏â', 'Ìà¨Ïûê', 'ÏùÄÌñâ', 'Ïπ¥Îìú', 'ÌòÑÍ∏à', 'ÏáºÌïë', 'Íµ¨Îß§', 'ÌåêÎß§', 'ÏÑúÎπÑÏä§', 'Í≥†Í∞ù', 'ÏãúÏû•'],
      
      // Í∏∞Ïà† Í≥ºÌïô
      tech: ['Í∏∞Ïà†', 'Í≥ºÌïô', 'Ïª¥Ìì®ÌÑ∞', 'Ïù∏ÌÑ∞ÎÑ∑', 'ÌîÑÎ°úÍ∑∏Îû®', 'Îç∞Ïù¥ÌÑ∞', 'Ïù∏Í≥µÏßÄÎä•', 'Î°úÎ¥á', 'Ìè∞', 'Í≤åÏûÑ', 'ÏõπÏÇ¨Ïù¥Ìä∏', 'Ïï±', 'ÏÜåÌîÑÌä∏Ïõ®Ïñ¥', 'ÌïòÎìúÏõ®Ïñ¥', 'Ï†ÑÏûê', 'ÎîîÏßÄÌÑ∏', 'Ïò®ÎùºÏù∏', 'Ïò§ÌîÑÎùºÏù∏'],
      
      // Í±¥Í∞ï ÏùòÎ£å
      health: ['Í±¥Í∞ï', 'Î≥ëÏõê', 'ÏùòÏÇ¨', 'ÏïΩ', 'Ïö¥Îèô', 'Î™∏', 'ÎßàÏùå', 'Ï†ïÏã†', 'ÏπòÎ£å', 'Í∞ÑÌò∏ÏÇ¨', 'ÏàòÏà†', 'Í≤ÄÏÇ¨', 'ÏßÑÎ£å', 'ÏùëÍ∏â', 'ÏïàÏ†Ñ', 'ÏúÑÌóò', 'ÏÇ¨Í≥†', 'Î≥¥Ìóò', 'ÏòàÎ∞©', 'ÌöåÎ≥µ'],
      
      // ÏùåÏïÖ ÏòàÏà†
      art: ['ÏùåÏïÖ', 'ÎÖ∏Îûò', 'ÏïÖÍ∏∞', 'ÌîºÏïÑÎÖ∏', 'Í∏∞ÌÉÄ', 'ÎìúÎüº', 'Ï∂§', 'Í∑∏Î¶º', 'ÏÇ¨ÏßÑ', 'ÏòÅÌôî', 'Ïó∞Í∑π', 'ÏÜåÏÑ§', 'Ïãú', 'ÎßåÌôî', 'Ï°∞Í∞Å', 'Ï†ÑÏãú', 'Í≥µÏó∞', 'ÏΩòÏÑúÌä∏', 'Î∞ïÎ¨ºÍ¥Ä', 'Í∞§Îü¨Î¶¨']
    };
    
    // Check if words are in same semantic group - high similarity
    for (const group of Object.values(semanticGroups)) {
      if (group.includes(word1) && group.includes(word2)) {
        // Calculate position-based similarity within group
        const pos1 = group.indexOf(word1);
        const pos2 = group.indexOf(word2);
        const distance = Math.abs(pos1 - pos2);
        const similarity = Math.max(0.7, 0.95 - (distance * 0.02)); // 0.7-0.95 range
        console.log(`üéØ Semantic group similarity: "${word1}" vs "${word2}" = ${similarity.toFixed(3)}`);
        return similarity;
      }
    }
    
    // Character-level similarity for Korean morphology
    const charSimilarity = this.calculateCharacterSimilarity(word1, word2);
    if (charSimilarity > 0.6) {
      const similarity = charSimilarity * 0.6; // Maximum 0.6 for character similarity
      console.log(`üî§ Character similarity: "${word1}" vs "${word2}" = ${similarity.toFixed(3)}`);
      return similarity;
    }
    
    // Length and structure similarity
    const lengthSimilarity = this.calculateLengthSimilarity(word1, word2);
    
    // Random baseline for unrelated words (following semantle-ko patterns)
    // Ensure minimum similarity to avoid 0 scores (like real word2vec)
    const randomBaseline = 0.20 + (Math.random() * 0.20); // 0.20-0.40 range
    const finalSimilarity = Math.max(randomBaseline, lengthSimilarity * 0.4);
    
    console.log(`üé≤ Baseline similarity: "${word1}" vs "${word2}" = ${finalSimilarity.toFixed(3)}`);
    return finalSimilarity;
  }
  
  private calculateCharacterSimilarity(word1: string, word2: string): number {
    const chars1 = word1.split('');
    const chars2 = word2.split('');
    const commonChars = chars1.filter(char => chars2.includes(char)).length;
    const totalChars = Math.max(chars1.length, chars2.length);
    return commonChars / totalChars;
  }
  
  private calculateLengthSimilarity(word1: string, word2: string): number {
    const lengthDiff = Math.abs(word1.length - word2.length);
    const maxLength = Math.max(word1.length, word2.length);
    return 1 - (lengthDiff / maxLength);
  }

  // Pure cosine similarity calculation (based on semantle-ko's word2vec.py)
  // return vec1.dot(vec2) / (norm(vec1) * norm(vec2))
  private cosineSimilarity(vec1: number[], vec2: number[]): number {
    if (vec1.length !== vec2.length) {
      throw new Error('Vector dimensions must match');
    }
    
    // Calculate dot product
    let dotProduct = 0;
    for (let i = 0; i < vec1.length; i++) {
      dotProduct += vec1[i] * vec2[i];
    }
    
    // Calculate norms (magnitudes)
    let norm1 = 0;
    let norm2 = 0;
    for (let i = 0; i < vec1.length; i++) {
      norm1 += vec1[i] * vec1[i];
      norm2 += vec2[i] * vec2[i];
    }
    norm1 = Math.sqrt(norm1);
    norm2 = Math.sqrt(norm2);
    
    // Prevent division by zero
    if (norm1 === 0 || norm2 === 0) {
      return 0;
    }
    
    // Return cosine similarity: vec1.dot(vec2) / (norm(vec1) * norm(vec2))
    return dotProduct / (norm1 * norm2);
  }

  isValidWord(word: string): boolean {
    // Í∞úÎ∞ú Î™®ÎìúÏóêÏÑúÎäî ÌïúÍµ≠Ïñ¥ Îã®Ïñ¥Î©¥ ÌóàÏö©
    if (process.env.NODE_ENV === 'development') {
      // ÌïúÍµ≠Ïñ¥ Î¨∏ÏûêÍ∞Ä Ìè¨Ìï®ÎêòÏñ¥ ÏûàÍ≥† 1-10Í∏ÄÏûê ÏÇ¨Ïù¥Î©¥ ÌóàÏö©
      const koreanRegex = /^[Í∞Ä-Ìû£]{1,10}$/;
      return koreanRegex.test(word);
    }
    
    return this.wordVectors.has(word);
  }

  getRandomWord(): string {
    // Use frequent words for better game experience
    if (this.frequentWords.length > 0) {
      // Pick from top frequent words for better gameplay
      const topWords = this.frequentWords.slice(0, 200); // Use top 200 words
      return topWords[Math.floor(Math.random() * topWords.length)];
    }
    
    // Fallback to wordVectors if frequent words not available
    const words = Array.from(this.wordVectors.keys());
    return words[Math.floor(Math.random() * words.length)];
  }

  getSuggestions(query: string, limit: number = 8): string[] {
    const words = Array.from(this.wordVectors.keys());
    return words
      .filter(word => word.includes(query))
      .slice(0, limit);
  }

  private getRankFromScore(score: number): string {
    if (score >= 95) return "ÏÉÅÏúÑ 10ÏúÑ";
    if (score >= 85) return "ÏÉÅÏúÑ 50ÏúÑ"; 
    if (score >= 75) return "ÏÉÅÏúÑ 100ÏúÑ";
    if (score >= 60) return "ÏÉÅÏúÑ 500ÏúÑ";
    if (score >= 45) return "ÏÉÅÏúÑ 1000ÏúÑ";
    return "1000ÏúÑ Ïù¥ÏÉÅ";
  }
}

export const word2vecService = new Word2VecService();
